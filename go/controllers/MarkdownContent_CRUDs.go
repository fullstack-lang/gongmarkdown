// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongmarkdown/go/models"
	"github.com/fullstack-lang/gongmarkdown/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __MarkdownContent__dummysDeclaration__ models.MarkdownContent
var __MarkdownContent_time__dummyDeclaration time.Duration

// An MarkdownContentID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getMarkdownContent updateMarkdownContent deleteMarkdownContent
type MarkdownContentID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// MarkdownContentInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postMarkdownContent updateMarkdownContent
type MarkdownContentInput struct {
	// The MarkdownContent to submit or modify
	// in: body
	MarkdownContent *orm.MarkdownContentAPI
}

// GetMarkdownContents
//
// swagger:route GET /markdowncontents markdowncontents getMarkdownContents
//
// # Get all markdowncontents
//
// Responses:
// default: genericError
//
//	200: markdowncontentDBResponse
func GetMarkdownContents(c *gin.Context) {
	db := orm.BackRepo.BackRepoMarkdownContent.GetDB()

	// source slice
	var markdowncontentDBs []orm.MarkdownContentDB
	query := db.Find(&markdowncontentDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	markdowncontentAPIs := make([]orm.MarkdownContentAPI, 0)

	// for each markdowncontent, update fields from the database nullable fields
	for idx := range markdowncontentDBs {
		markdowncontentDB := &markdowncontentDBs[idx]
		_ = markdowncontentDB
		var markdowncontentAPI orm.MarkdownContentAPI

		// insertion point for updating fields
		markdowncontentAPI.ID = markdowncontentDB.ID
		markdowncontentDB.CopyBasicFieldsToMarkdownContent(&markdowncontentAPI.MarkdownContent)
		markdowncontentAPI.MarkdownContentPointersEnconding = markdowncontentDB.MarkdownContentPointersEnconding
		markdowncontentAPIs = append(markdowncontentAPIs, markdowncontentAPI)
	}

	c.JSON(http.StatusOK, markdowncontentAPIs)
}

// PostMarkdownContent
//
// swagger:route POST /markdowncontents markdowncontents postMarkdownContent
//
// Creates a markdowncontent
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostMarkdownContent(c *gin.Context) {
	db := orm.BackRepo.BackRepoMarkdownContent.GetDB()

	// Validate input
	var input orm.MarkdownContentAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create markdowncontent
	markdowncontentDB := orm.MarkdownContentDB{}
	markdowncontentDB.MarkdownContentPointersEnconding = input.MarkdownContentPointersEnconding
	markdowncontentDB.CopyBasicFieldsFromMarkdownContent(&input.MarkdownContent)

	query := db.Create(&markdowncontentDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoMarkdownContent.CheckoutPhaseOneInstance(&markdowncontentDB)
	markdowncontent := (*orm.BackRepo.BackRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr)[markdowncontentDB.ID]

	if markdowncontent != nil {
		models.AfterCreateFromFront(&models.Stage, markdowncontent)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, markdowncontentDB)
}

// GetMarkdownContent
//
// swagger:route GET /markdowncontents/{ID} markdowncontents getMarkdownContent
//
// Gets the details for a markdowncontent.
//
// Responses:
// default: genericError
//
//	200: markdowncontentDBResponse
func GetMarkdownContent(c *gin.Context) {
	db := orm.BackRepo.BackRepoMarkdownContent.GetDB()

	// Get markdowncontentDB in DB
	var markdowncontentDB orm.MarkdownContentDB
	if err := db.First(&markdowncontentDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var markdowncontentAPI orm.MarkdownContentAPI
	markdowncontentAPI.ID = markdowncontentDB.ID
	markdowncontentAPI.MarkdownContentPointersEnconding = markdowncontentDB.MarkdownContentPointersEnconding
	markdowncontentDB.CopyBasicFieldsToMarkdownContent(&markdowncontentAPI.MarkdownContent)

	c.JSON(http.StatusOK, markdowncontentAPI)
}

// UpdateMarkdownContent
//
// swagger:route PATCH /markdowncontents/{ID} markdowncontents updateMarkdownContent
//
// # Update a markdowncontent
//
// Responses:
// default: genericError
//
//	200: markdowncontentDBResponse
func UpdateMarkdownContent(c *gin.Context) {
	db := orm.BackRepo.BackRepoMarkdownContent.GetDB()

	// Get model if exist
	var markdowncontentDB orm.MarkdownContentDB

	// fetch the markdowncontent
	query := db.First(&markdowncontentDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.MarkdownContentAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	markdowncontentDB.CopyBasicFieldsFromMarkdownContent(&input.MarkdownContent)
	markdowncontentDB.MarkdownContentPointersEnconding = input.MarkdownContentPointersEnconding

	query = db.Model(&markdowncontentDB).Updates(markdowncontentDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	markdowncontentNew := new(models.MarkdownContent)
	markdowncontentDB.CopyBasicFieldsToMarkdownContent(markdowncontentNew)

	// get stage instance from DB instance, and call callback function
	markdowncontentOld := (*orm.BackRepo.BackRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr)[markdowncontentDB.ID]
	if markdowncontentOld != nil {
		models.AfterUpdateFromFront(&models.Stage, markdowncontentOld, markdowncontentNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the markdowncontentDB
	c.JSON(http.StatusOK, markdowncontentDB)
}

// DeleteMarkdownContent
//
// swagger:route DELETE /markdowncontents/{ID} markdowncontents deleteMarkdownContent
//
// # Delete a markdowncontent
//
// default: genericError
//
//	200: markdowncontentDBResponse
func DeleteMarkdownContent(c *gin.Context) {
	db := orm.BackRepo.BackRepoMarkdownContent.GetDB()

	// Get model if exist
	var markdowncontentDB orm.MarkdownContentDB
	if err := db.First(&markdowncontentDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&markdowncontentDB)

	// get an instance (not staged) from DB instance, and call callback function
	markdowncontentDeleted := new(models.MarkdownContent)
	markdowncontentDB.CopyBasicFieldsToMarkdownContent(markdowncontentDeleted)

	// get stage instance from DB instance, and call callback function
	markdowncontentStaged := (*orm.BackRepo.BackRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr)[markdowncontentDB.ID]
	if markdowncontentStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, markdowncontentStaged, markdowncontentDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
