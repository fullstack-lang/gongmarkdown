// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongmarkdown/go/models"
	"github.com/fullstack-lang/gongmarkdown/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Row__dummysDeclaration__ models.Row
var __Row_time__dummyDeclaration time.Duration

// An RowID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getRow updateRow deleteRow
type RowID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// RowInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postRow updateRow
type RowInput struct {
	// The Row to submit or modify
	// in: body
	Row *orm.RowAPI
}

// GetRows
//
// swagger:route GET /rows rows getRows
//
// Get all rows
//
// Responses:
//    default: genericError
//        200: rowDBsResponse
func GetRows(c *gin.Context) {
	db := orm.BackRepo.BackRepoRow.GetDB()

	// source slice
	var rowDBs []orm.RowDB
	query := db.Find(&rowDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	rowAPIs := make([]orm.RowAPI, 0)

	// for each row, update fields from the database nullable fields
	for idx := range rowDBs {
		rowDB := &rowDBs[idx]
		_ = rowDB
		var rowAPI orm.RowAPI

		// insertion point for updating fields
		rowAPI.ID = rowDB.ID
		rowDB.CopyBasicFieldsToRow(&rowAPI.Row)
		rowAPI.RowPointersEnconding = rowDB.RowPointersEnconding
		rowAPIs = append(rowAPIs, rowAPI)
	}

	c.JSON(http.StatusOK, rowAPIs)
}

// PostRow
//
// swagger:route POST /rows rows postRow
//
// Creates a row
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: rowDBResponse
func PostRow(c *gin.Context) {
	db := orm.BackRepo.BackRepoRow.GetDB()

	// Validate input
	var input orm.RowAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create row
	rowDB := orm.RowDB{}
	rowDB.RowPointersEnconding = input.RowPointersEnconding
	rowDB.CopyBasicFieldsFromRow(&input.Row)

	query := db.Create(&rowDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, rowDB)
}

// GetRow
//
// swagger:route GET /rows/{ID} rows getRow
//
// Gets the details for a row.
//
// Responses:
//    default: genericError
//        200: rowDBResponse
func GetRow(c *gin.Context) {
	db := orm.BackRepo.BackRepoRow.GetDB()

	// Get rowDB in DB
	var rowDB orm.RowDB
	if err := db.First(&rowDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var rowAPI orm.RowAPI
	rowAPI.ID = rowDB.ID
	rowAPI.RowPointersEnconding = rowDB.RowPointersEnconding
	rowDB.CopyBasicFieldsToRow(&rowAPI.Row)

	c.JSON(http.StatusOK, rowAPI)
}

// UpdateRow
//
// swagger:route PATCH /rows/{ID} rows updateRow
//
// Update a row
//
// Responses:
//    default: genericError
//        200: rowDBResponse
func UpdateRow(c *gin.Context) {
	db := orm.BackRepo.BackRepoRow.GetDB()

	// Get model if exist
	var rowDB orm.RowDB

	// fetch the row
	query := db.First(&rowDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.RowAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	rowDB.CopyBasicFieldsFromRow(&input.Row)
	rowDB.RowPointersEnconding = input.RowPointersEnconding

	query = db.Model(&rowDB).Updates(rowDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the rowDB
	c.JSON(http.StatusOK, rowDB)
}

// DeleteRow
//
// swagger:route DELETE /rows/{ID} rows deleteRow
//
// Delete a row
//
// Responses:
//    default: genericError
func DeleteRow(c *gin.Context) {
	db := orm.BackRepo.BackRepoRow.GetDB()

	// Get model if exist
	var rowDB orm.RowDB
	if err := db.First(&rowDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&rowDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
