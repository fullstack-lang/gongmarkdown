// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongmarkdown/go/models"
	"github.com/fullstack-lang/gongmarkdown/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __DummyData__dummysDeclaration__ models.DummyData
var __DummyData_time__dummyDeclaration time.Duration

// An DummyDataID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getDummyData updateDummyData deleteDummyData
type DummyDataID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// DummyDataInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postDummyData updateDummyData
type DummyDataInput struct {
	// The DummyData to submit or modify
	// in: body
	DummyData *orm.DummyDataAPI
}

// GetDummyDatas
//
// swagger:route GET /dummydatas dummydatas getDummyDatas
//
// Get all dummydatas
//
// Responses:
//    default: genericError
//        200: dummydataDBsResponse
func GetDummyDatas(c *gin.Context) {
	db := orm.BackRepo.BackRepoDummyData.GetDB()

	// source slice
	var dummydataDBs []orm.DummyDataDB
	query := db.Find(&dummydataDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	dummydataAPIs := make([]orm.DummyDataAPI, 0)

	// for each dummydata, update fields from the database nullable fields
	for idx := range dummydataDBs {
		dummydataDB := &dummydataDBs[idx]
		_ = dummydataDB
		var dummydataAPI orm.DummyDataAPI

		// insertion point for updating fields
		dummydataAPI.ID = dummydataDB.ID
		dummydataDB.CopyBasicFieldsToDummyData(&dummydataAPI.DummyData)
		dummydataAPI.DummyDataPointersEnconding = dummydataDB.DummyDataPointersEnconding
		dummydataAPIs = append(dummydataAPIs, dummydataAPI)
	}

	c.JSON(http.StatusOK, dummydataAPIs)
}

// PostDummyData
//
// swagger:route POST /dummydatas dummydatas postDummyData
//
// Creates a dummydata
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: dummydataDBResponse
func PostDummyData(c *gin.Context) {
	db := orm.BackRepo.BackRepoDummyData.GetDB()

	// Validate input
	var input orm.DummyDataAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create dummydata
	dummydataDB := orm.DummyDataDB{}
	dummydataDB.DummyDataPointersEnconding = input.DummyDataPointersEnconding
	dummydataDB.CopyBasicFieldsFromDummyData(&input.DummyData)

	query := db.Create(&dummydataDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, dummydataDB)
}

// GetDummyData
//
// swagger:route GET /dummydatas/{ID} dummydatas getDummyData
//
// Gets the details for a dummydata.
//
// Responses:
//    default: genericError
//        200: dummydataDBResponse
func GetDummyData(c *gin.Context) {
	db := orm.BackRepo.BackRepoDummyData.GetDB()

	// Get dummydataDB in DB
	var dummydataDB orm.DummyDataDB
	if err := db.First(&dummydataDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var dummydataAPI orm.DummyDataAPI
	dummydataAPI.ID = dummydataDB.ID
	dummydataAPI.DummyDataPointersEnconding = dummydataDB.DummyDataPointersEnconding
	dummydataDB.CopyBasicFieldsToDummyData(&dummydataAPI.DummyData)

	c.JSON(http.StatusOK, dummydataAPI)
}

// UpdateDummyData
//
// swagger:route PATCH /dummydatas/{ID} dummydatas updateDummyData
//
// Update a dummydata
//
// Responses:
//    default: genericError
//        200: dummydataDBResponse
func UpdateDummyData(c *gin.Context) {
	db := orm.BackRepo.BackRepoDummyData.GetDB()

	// Get model if exist
	var dummydataDB orm.DummyDataDB

	// fetch the dummydata
	query := db.First(&dummydataDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.DummyDataAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	dummydataDB.CopyBasicFieldsFromDummyData(&input.DummyData)
	dummydataDB.DummyDataPointersEnconding = input.DummyDataPointersEnconding

	query = db.Model(&dummydataDB).Updates(dummydataDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the dummydataDB
	c.JSON(http.StatusOK, dummydataDB)
}

// DeleteDummyData
//
// swagger:route DELETE /dummydatas/{ID} dummydatas deleteDummyData
//
// Delete a dummydata
//
// Responses:
//    default: genericError
func DeleteDummyData(c *gin.Context) {
	db := orm.BackRepo.BackRepoDummyData.GetDB()

	// Get model if exist
	var dummydataDB orm.DummyDataDB
	if err := db.First(&dummydataDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&dummydataDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
