// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongmarkdown/go/models"
	"github.com/fullstack-lang/gongmarkdown/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __AnotherDummyData__dummysDeclaration__ models.AnotherDummyData
var __AnotherDummyData_time__dummyDeclaration time.Duration

// An AnotherDummyDataID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getAnotherDummyData updateAnotherDummyData deleteAnotherDummyData
type AnotherDummyDataID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// AnotherDummyDataInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postAnotherDummyData updateAnotherDummyData
type AnotherDummyDataInput struct {
	// The AnotherDummyData to submit or modify
	// in: body
	AnotherDummyData *orm.AnotherDummyDataAPI
}

// GetAnotherDummyDatas
//
// swagger:route GET /anotherdummydatas anotherdummydatas getAnotherDummyDatas
//
// # Get all anotherdummydatas
//
// Responses:
// default: genericError
//
//	200: anotherdummydataDBResponse
func GetAnotherDummyDatas(c *gin.Context) {
	db := orm.BackRepo.BackRepoAnotherDummyData.GetDB()

	// source slice
	var anotherdummydataDBs []orm.AnotherDummyDataDB
	query := db.Find(&anotherdummydataDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	anotherdummydataAPIs := make([]orm.AnotherDummyDataAPI, 0)

	// for each anotherdummydata, update fields from the database nullable fields
	for idx := range anotherdummydataDBs {
		anotherdummydataDB := &anotherdummydataDBs[idx]
		_ = anotherdummydataDB
		var anotherdummydataAPI orm.AnotherDummyDataAPI

		// insertion point for updating fields
		anotherdummydataAPI.ID = anotherdummydataDB.ID
		anotherdummydataDB.CopyBasicFieldsToAnotherDummyData(&anotherdummydataAPI.AnotherDummyData)
		anotherdummydataAPI.AnotherDummyDataPointersEnconding = anotherdummydataDB.AnotherDummyDataPointersEnconding
		anotherdummydataAPIs = append(anotherdummydataAPIs, anotherdummydataAPI)
	}

	c.JSON(http.StatusOK, anotherdummydataAPIs)
}

// PostAnotherDummyData
//
// swagger:route POST /anotherdummydatas anotherdummydatas postAnotherDummyData
//
// Creates a anotherdummydata
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostAnotherDummyData(c *gin.Context) {
	db := orm.BackRepo.BackRepoAnotherDummyData.GetDB()

	// Validate input
	var input orm.AnotherDummyDataAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create anotherdummydata
	anotherdummydataDB := orm.AnotherDummyDataDB{}
	anotherdummydataDB.AnotherDummyDataPointersEnconding = input.AnotherDummyDataPointersEnconding
	anotherdummydataDB.CopyBasicFieldsFromAnotherDummyData(&input.AnotherDummyData)

	query := db.Create(&anotherdummydataDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoAnotherDummyData.CheckoutPhaseOneInstance(&anotherdummydataDB)
	anotherdummydata := (*orm.BackRepo.BackRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr)[anotherdummydataDB.ID]

	if anotherdummydata != nil {
		models.AfterCreateFromFront(&models.Stage, anotherdummydata)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, anotherdummydataDB)
}

// GetAnotherDummyData
//
// swagger:route GET /anotherdummydatas/{ID} anotherdummydatas getAnotherDummyData
//
// Gets the details for a anotherdummydata.
//
// Responses:
// default: genericError
//
//	200: anotherdummydataDBResponse
func GetAnotherDummyData(c *gin.Context) {
	db := orm.BackRepo.BackRepoAnotherDummyData.GetDB()

	// Get anotherdummydataDB in DB
	var anotherdummydataDB orm.AnotherDummyDataDB
	if err := db.First(&anotherdummydataDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var anotherdummydataAPI orm.AnotherDummyDataAPI
	anotherdummydataAPI.ID = anotherdummydataDB.ID
	anotherdummydataAPI.AnotherDummyDataPointersEnconding = anotherdummydataDB.AnotherDummyDataPointersEnconding
	anotherdummydataDB.CopyBasicFieldsToAnotherDummyData(&anotherdummydataAPI.AnotherDummyData)

	c.JSON(http.StatusOK, anotherdummydataAPI)
}

// UpdateAnotherDummyData
//
// swagger:route PATCH /anotherdummydatas/{ID} anotherdummydatas updateAnotherDummyData
//
// # Update a anotherdummydata
//
// Responses:
// default: genericError
//
//	200: anotherdummydataDBResponse
func UpdateAnotherDummyData(c *gin.Context) {
	db := orm.BackRepo.BackRepoAnotherDummyData.GetDB()

	// Get model if exist
	var anotherdummydataDB orm.AnotherDummyDataDB

	// fetch the anotherdummydata
	query := db.First(&anotherdummydataDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.AnotherDummyDataAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	anotherdummydataDB.CopyBasicFieldsFromAnotherDummyData(&input.AnotherDummyData)
	anotherdummydataDB.AnotherDummyDataPointersEnconding = input.AnotherDummyDataPointersEnconding

	query = db.Model(&anotherdummydataDB).Updates(anotherdummydataDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	anotherdummydataNew := new(models.AnotherDummyData)
	anotherdummydataDB.CopyBasicFieldsToAnotherDummyData(anotherdummydataNew)

	// get stage instance from DB instance, and call callback function
	anotherdummydataOld := (*orm.BackRepo.BackRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr)[anotherdummydataDB.ID]
	if anotherdummydataOld != nil {
		models.AfterUpdateFromFront(&models.Stage, anotherdummydataOld, anotherdummydataNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the anotherdummydataDB
	c.JSON(http.StatusOK, anotherdummydataDB)
}

// DeleteAnotherDummyData
//
// swagger:route DELETE /anotherdummydatas/{ID} anotherdummydatas deleteAnotherDummyData
//
// # Delete a anotherdummydata
//
// default: genericError
//
//	200: anotherdummydataDBResponse
func DeleteAnotherDummyData(c *gin.Context) {
	db := orm.BackRepo.BackRepoAnotherDummyData.GetDB()

	// Get model if exist
	var anotherdummydataDB orm.AnotherDummyDataDB
	if err := db.First(&anotherdummydataDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&anotherdummydataDB)

	// get an instance (not staged) from DB instance, and call callback function
	anotherdummydataDeleted := new(models.AnotherDummyData)
	anotherdummydataDB.CopyBasicFieldsToAnotherDummyData(anotherdummydataDeleted)

	// get stage instance from DB instance, and call callback function
	anotherdummydataStaged := (*orm.BackRepo.BackRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr)[anotherdummydataDB.ID]
	if anotherdummydataStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, anotherdummydataStaged, anotherdummydataDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
