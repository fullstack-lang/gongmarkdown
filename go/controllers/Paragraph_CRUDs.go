// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"gongmarkdown/go/models"
	"gongmarkdown/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Paragraph__dummysDeclaration__ models.Paragraph
var __Paragraph_time__dummyDeclaration time.Duration

// An ParagraphID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getParagraph updateParagraph deleteParagraph
type ParagraphID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// ParagraphInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postParagraph updateParagraph
type ParagraphInput struct {
	// The Paragraph to submit or modify
	// in: body
	Paragraph *orm.ParagraphAPI
}

// GetParagraphs
//
// swagger:route GET /paragraphs paragraphs getParagraphs
//
// Get all paragraphs
//
// Responses:
//    default: genericError
//        200: paragraphDBsResponse
func GetParagraphs(c *gin.Context) {
	db := orm.BackRepo.BackRepoParagraph.GetDB()

	// source slice
	var paragraphDBs []orm.ParagraphDB
	query := db.Find(&paragraphDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	paragraphAPIs := make([]orm.ParagraphAPI, 0)

	// for each paragraph, update fields from the database nullable fields
	for idx := range paragraphDBs {
		paragraphDB := &paragraphDBs[idx]
		_ = paragraphDB
		var paragraphAPI orm.ParagraphAPI

		// insertion point for updating fields
		paragraphAPI.ID = paragraphDB.ID
		paragraphDB.CopyBasicFieldsToParagraph(&paragraphAPI.Paragraph)
		paragraphAPI.ParagraphPointersEnconding = paragraphDB.ParagraphPointersEnconding
		paragraphAPIs = append(paragraphAPIs, paragraphAPI)
	}

	c.JSON(http.StatusOK, paragraphAPIs)
}

// PostParagraph
//
// swagger:route POST /paragraphs paragraphs postParagraph
//
// Creates a paragraph
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: paragraphDBResponse
func PostParagraph(c *gin.Context) {
	db := orm.BackRepo.BackRepoParagraph.GetDB()

	// Validate input
	var input orm.ParagraphAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create paragraph
	paragraphDB := orm.ParagraphDB{}
	paragraphDB.ParagraphPointersEnconding = input.ParagraphPointersEnconding
	paragraphDB.CopyBasicFieldsFromParagraph(&input.Paragraph)

	query := db.Create(&paragraphDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, paragraphDB)
}

// GetParagraph
//
// swagger:route GET /paragraphs/{ID} paragraphs getParagraph
//
// Gets the details for a paragraph.
//
// Responses:
//    default: genericError
//        200: paragraphDBResponse
func GetParagraph(c *gin.Context) {
	db := orm.BackRepo.BackRepoParagraph.GetDB()

	// Get paragraphDB in DB
	var paragraphDB orm.ParagraphDB
	if err := db.First(&paragraphDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var paragraphAPI orm.ParagraphAPI
	paragraphAPI.ID = paragraphDB.ID
	paragraphAPI.ParagraphPointersEnconding = paragraphDB.ParagraphPointersEnconding
	paragraphDB.CopyBasicFieldsToParagraph(&paragraphAPI.Paragraph)

	c.JSON(http.StatusOK, paragraphAPI)
}

// UpdateParagraph
//
// swagger:route PATCH /paragraphs/{ID} paragraphs updateParagraph
//
// Update a paragraph
//
// Responses:
//    default: genericError
//        200: paragraphDBResponse
func UpdateParagraph(c *gin.Context) {
	db := orm.BackRepo.BackRepoParagraph.GetDB()

	// Get model if exist
	var paragraphDB orm.ParagraphDB

	// fetch the paragraph
	query := db.First(&paragraphDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.ParagraphAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	paragraphDB.CopyBasicFieldsFromParagraph(&input.Paragraph)
	paragraphDB.ParagraphPointersEnconding = input.ParagraphPointersEnconding

	query = db.Model(&paragraphDB).Updates(paragraphDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the paragraphDB
	c.JSON(http.StatusOK, paragraphDB)
}

// DeleteParagraph
//
// swagger:route DELETE /paragraphs/{ID} paragraphs deleteParagraph
//
// Delete a paragraph
//
// Responses:
//    default: genericError
func DeleteParagraph(c *gin.Context) {
	db := orm.BackRepo.BackRepoParagraph.GetDB()

	// Get model if exist
	var paragraphDB orm.ParagraphDB
	if err := db.First(&paragraphDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&paragraphDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
