// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/gongmarkdown/go/models"
	"github.com/fullstack-lang/gongmarkdown/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Element__dummysDeclaration__ models.Element
var __Element_time__dummyDeclaration time.Duration

// An ElementID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getElement updateElement deleteElement
type ElementID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// ElementInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postElement updateElement
type ElementInput struct {
	// The Element to submit or modify
	// in: body
	Element *orm.ElementAPI
}

// GetElements
//
// swagger:route GET /elements elements getElements
//
// Get all elements
//
// Responses:
//    default: genericError
//        200: elementDBsResponse
func GetElements(c *gin.Context) {
	db := orm.BackRepo.BackRepoElement.GetDB()

	// source slice
	var elementDBs []orm.ElementDB
	query := db.Find(&elementDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	elementAPIs := make([]orm.ElementAPI, 0)

	// for each element, update fields from the database nullable fields
	for idx := range elementDBs {
		elementDB := &elementDBs[idx]
		_ = elementDB
		var elementAPI orm.ElementAPI

		// insertion point for updating fields
		elementAPI.ID = elementDB.ID
		elementDB.CopyBasicFieldsToElement(&elementAPI.Element)
		elementAPI.ElementPointersEnconding = elementDB.ElementPointersEnconding
		elementAPIs = append(elementAPIs, elementAPI)
	}

	c.JSON(http.StatusOK, elementAPIs)
}

// PostElement
//
// swagger:route POST /elements elements postElement
//
// Creates a element
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: elementDBResponse
func PostElement(c *gin.Context) {
	db := orm.BackRepo.BackRepoElement.GetDB()

	// Validate input
	var input orm.ElementAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create element
	elementDB := orm.ElementDB{}
	elementDB.ElementPointersEnconding = input.ElementPointersEnconding
	elementDB.CopyBasicFieldsFromElement(&input.Element)

	query := db.Create(&elementDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, elementDB)
}

// GetElement
//
// swagger:route GET /elements/{ID} elements getElement
//
// Gets the details for a element.
//
// Responses:
//    default: genericError
//        200: elementDBResponse
func GetElement(c *gin.Context) {
	db := orm.BackRepo.BackRepoElement.GetDB()

	// Get elementDB in DB
	var elementDB orm.ElementDB
	if err := db.First(&elementDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var elementAPI orm.ElementAPI
	elementAPI.ID = elementDB.ID
	elementAPI.ElementPointersEnconding = elementDB.ElementPointersEnconding
	elementDB.CopyBasicFieldsToElement(&elementAPI.Element)

	c.JSON(http.StatusOK, elementAPI)
}

// UpdateElement
//
// swagger:route PATCH /elements/{ID} elements updateElement
//
// Update a element
//
// Responses:
//    default: genericError
//        200: elementDBResponse
func UpdateElement(c *gin.Context) {
	db := orm.BackRepo.BackRepoElement.GetDB()

	// Get model if exist
	var elementDB orm.ElementDB

	// fetch the element
	query := db.First(&elementDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.ElementAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	elementDB.CopyBasicFieldsFromElement(&input.Element)
	elementDB.ElementPointersEnconding = input.ElementPointersEnconding

	query = db.Model(&elementDB).Updates(elementDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the elementDB
	c.JSON(http.StatusOK, elementDB)
}

// DeleteElement
//
// swagger:route DELETE /elements/{ID} elements deleteElement
//
// Delete a element
//
// Responses:
//    default: genericError
func DeleteElement(c *gin.Context) {
	db := orm.BackRepo.BackRepoElement.GetDB()

	// Get model if exist
	var elementDB orm.ElementDB
	if err := db.First(&elementDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&elementDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
