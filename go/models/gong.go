// generated by ModelGongFileTemplate
package models

import (
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// swagger:ignore
type __void struct{}

// needed for creating set of instances in the stage
var __member __void

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Cells           map[*Cell]struct{}
	Cells_mapString map[string]*Cell

	Elements           map[*Element]struct{}
	Elements_mapString map[string]*Element

	MarkdownContents           map[*MarkdownContent]struct{}
	MarkdownContents_mapString map[string]*MarkdownContent

	Rows           map[*Row]struct{}
	Rows_mapString map[string]*Row

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitCell(cell *Cell)
	CheckoutCell(cell *Cell)
	CommitElement(element *Element)
	CheckoutElement(element *Element)
	CommitMarkdownContent(markdowncontent *MarkdownContent)
	CheckoutMarkdownContent(markdowncontent *MarkdownContent)
	CommitRow(row *Row)
	CheckoutRow(row *Row)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Cells:           make(map[*Cell]struct{}),
	Cells_mapString: make(map[string]*Cell),

	Elements:           make(map[*Element]struct{}),
	Elements_mapString: make(map[string]*Element),

	MarkdownContents:           make(map[*MarkdownContent]struct{}),
	MarkdownContents_mapString: make(map[string]*MarkdownContent),

	Rows:           make(map[*Row]struct{}),
	Rows_mapString: make(map[string]*Row),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Cell"] = len(stage.Cells)
	stage.Map_GongStructName_InstancesNb["Element"] = len(stage.Elements)
	stage.Map_GongStructName_InstancesNb["MarkdownContent"] = len(stage.MarkdownContents)
	stage.Map_GongStructName_InstancesNb["Row"] = len(stage.Rows)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
func (stage *StageStruct) getCellOrderedStructWithNameField() []*Cell {
	// have alphabetical order generation
	cellOrdered := []*Cell{}
	for cell := range stage.Cells {
		cellOrdered = append(cellOrdered, cell)
	}
	sort.Slice(cellOrdered[:], func(i, j int) bool {
		return cellOrdered[i].Name < cellOrdered[j].Name
	})
	return cellOrdered
}

// Stage puts cell to the model stage
func (cell *Cell) Stage() *Cell {
	Stage.Cells[cell] = __member
	Stage.Cells_mapString[cell.Name] = cell

	return cell
}

// Unstage removes cell off the model stage
func (cell *Cell) Unstage() *Cell {
	delete(Stage.Cells, cell)
	delete(Stage.Cells_mapString, cell.Name)
	return cell
}

// commit cell to the back repo (if it is already staged)
func (cell *Cell) Commit() *Cell {
	if _, ok := Stage.Cells[cell]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitCell(cell)
		}
	}
	return cell
}

// Checkout cell to the back repo (if it is already staged)
func (cell *Cell) Checkout() *Cell {
	if _, ok := Stage.Cells[cell]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutCell(cell)
		}
	}
	return cell
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of cell to the model stage
func (cell *Cell) StageCopy() *Cell {
	_cell := new(Cell)
	*_cell = *cell
	_cell.Stage()
	return _cell
}

// StageAndCommit appends cell to the model stage and commit to the orm repo
func (cell *Cell) StageAndCommit() *Cell {
	cell.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCell(cell)
	}
	return cell
}

// DeleteStageAndCommit appends cell to the model stage and commit to the orm repo
func (cell *Cell) DeleteStageAndCommit() *Cell {
	cell.Unstage()
	DeleteORMCell(cell)
	return cell
}

// StageCopyAndCommit appends a copy of cell to the model stage and commit to the orm repo
func (cell *Cell) StageCopyAndCommit() *Cell {
	_cell := new(Cell)
	*_cell = *cell
	_cell.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCell(cell)
	}
	return _cell
}

// CreateORMCell enables dynamic staging of a Cell instance
func CreateORMCell(cell *Cell) {
	cell.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCell(cell)
	}
}

// DeleteORMCell enables dynamic staging of a Cell instance
func DeleteORMCell(cell *Cell) {
	cell.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMCell(cell)
	}
}

func (stage *StageStruct) getElementOrderedStructWithNameField() []*Element {
	// have alphabetical order generation
	elementOrdered := []*Element{}
	for element := range stage.Elements {
		elementOrdered = append(elementOrdered, element)
	}
	sort.Slice(elementOrdered[:], func(i, j int) bool {
		return elementOrdered[i].Name < elementOrdered[j].Name
	})
	return elementOrdered
}

// Stage puts element to the model stage
func (element *Element) Stage() *Element {
	Stage.Elements[element] = __member
	Stage.Elements_mapString[element.Name] = element

	return element
}

// Unstage removes element off the model stage
func (element *Element) Unstage() *Element {
	delete(Stage.Elements, element)
	delete(Stage.Elements_mapString, element.Name)
	return element
}

// commit element to the back repo (if it is already staged)
func (element *Element) Commit() *Element {
	if _, ok := Stage.Elements[element]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitElement(element)
		}
	}
	return element
}

// Checkout element to the back repo (if it is already staged)
func (element *Element) Checkout() *Element {
	if _, ok := Stage.Elements[element]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutElement(element)
		}
	}
	return element
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of element to the model stage
func (element *Element) StageCopy() *Element {
	_element := new(Element)
	*_element = *element
	_element.Stage()
	return _element
}

// StageAndCommit appends element to the model stage and commit to the orm repo
func (element *Element) StageAndCommit() *Element {
	element.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMElement(element)
	}
	return element
}

// DeleteStageAndCommit appends element to the model stage and commit to the orm repo
func (element *Element) DeleteStageAndCommit() *Element {
	element.Unstage()
	DeleteORMElement(element)
	return element
}

// StageCopyAndCommit appends a copy of element to the model stage and commit to the orm repo
func (element *Element) StageCopyAndCommit() *Element {
	_element := new(Element)
	*_element = *element
	_element.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMElement(element)
	}
	return _element
}

// CreateORMElement enables dynamic staging of a Element instance
func CreateORMElement(element *Element) {
	element.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMElement(element)
	}
}

// DeleteORMElement enables dynamic staging of a Element instance
func DeleteORMElement(element *Element) {
	element.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMElement(element)
	}
}

func (stage *StageStruct) getMarkdownContentOrderedStructWithNameField() []*MarkdownContent {
	// have alphabetical order generation
	markdowncontentOrdered := []*MarkdownContent{}
	for markdowncontent := range stage.MarkdownContents {
		markdowncontentOrdered = append(markdowncontentOrdered, markdowncontent)
	}
	sort.Slice(markdowncontentOrdered[:], func(i, j int) bool {
		return markdowncontentOrdered[i].Name < markdowncontentOrdered[j].Name
	})
	return markdowncontentOrdered
}

// Stage puts markdowncontent to the model stage
func (markdowncontent *MarkdownContent) Stage() *MarkdownContent {
	Stage.MarkdownContents[markdowncontent] = __member
	Stage.MarkdownContents_mapString[markdowncontent.Name] = markdowncontent

	return markdowncontent
}

// Unstage removes markdowncontent off the model stage
func (markdowncontent *MarkdownContent) Unstage() *MarkdownContent {
	delete(Stage.MarkdownContents, markdowncontent)
	delete(Stage.MarkdownContents_mapString, markdowncontent.Name)
	return markdowncontent
}

// commit markdowncontent to the back repo (if it is already staged)
func (markdowncontent *MarkdownContent) Commit() *MarkdownContent {
	if _, ok := Stage.MarkdownContents[markdowncontent]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitMarkdownContent(markdowncontent)
		}
	}
	return markdowncontent
}

// Checkout markdowncontent to the back repo (if it is already staged)
func (markdowncontent *MarkdownContent) Checkout() *MarkdownContent {
	if _, ok := Stage.MarkdownContents[markdowncontent]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutMarkdownContent(markdowncontent)
		}
	}
	return markdowncontent
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of markdowncontent to the model stage
func (markdowncontent *MarkdownContent) StageCopy() *MarkdownContent {
	_markdowncontent := new(MarkdownContent)
	*_markdowncontent = *markdowncontent
	_markdowncontent.Stage()
	return _markdowncontent
}

// StageAndCommit appends markdowncontent to the model stage and commit to the orm repo
func (markdowncontent *MarkdownContent) StageAndCommit() *MarkdownContent {
	markdowncontent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarkdownContent(markdowncontent)
	}
	return markdowncontent
}

// DeleteStageAndCommit appends markdowncontent to the model stage and commit to the orm repo
func (markdowncontent *MarkdownContent) DeleteStageAndCommit() *MarkdownContent {
	markdowncontent.Unstage()
	DeleteORMMarkdownContent(markdowncontent)
	return markdowncontent
}

// StageCopyAndCommit appends a copy of markdowncontent to the model stage and commit to the orm repo
func (markdowncontent *MarkdownContent) StageCopyAndCommit() *MarkdownContent {
	_markdowncontent := new(MarkdownContent)
	*_markdowncontent = *markdowncontent
	_markdowncontent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarkdownContent(markdowncontent)
	}
	return _markdowncontent
}

// CreateORMMarkdownContent enables dynamic staging of a MarkdownContent instance
func CreateORMMarkdownContent(markdowncontent *MarkdownContent) {
	markdowncontent.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMMarkdownContent(markdowncontent)
	}
}

// DeleteORMMarkdownContent enables dynamic staging of a MarkdownContent instance
func DeleteORMMarkdownContent(markdowncontent *MarkdownContent) {
	markdowncontent.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMMarkdownContent(markdowncontent)
	}
}

func (stage *StageStruct) getRowOrderedStructWithNameField() []*Row {
	// have alphabetical order generation
	rowOrdered := []*Row{}
	for row := range stage.Rows {
		rowOrdered = append(rowOrdered, row)
	}
	sort.Slice(rowOrdered[:], func(i, j int) bool {
		return rowOrdered[i].Name < rowOrdered[j].Name
	})
	return rowOrdered
}

// Stage puts row to the model stage
func (row *Row) Stage() *Row {
	Stage.Rows[row] = __member
	Stage.Rows_mapString[row.Name] = row

	return row
}

// Unstage removes row off the model stage
func (row *Row) Unstage() *Row {
	delete(Stage.Rows, row)
	delete(Stage.Rows_mapString, row.Name)
	return row
}

// commit row to the back repo (if it is already staged)
func (row *Row) Commit() *Row {
	if _, ok := Stage.Rows[row]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitRow(row)
		}
	}
	return row
}

// Checkout row to the back repo (if it is already staged)
func (row *Row) Checkout() *Row {
	if _, ok := Stage.Rows[row]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutRow(row)
		}
	}
	return row
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of row to the model stage
func (row *Row) StageCopy() *Row {
	_row := new(Row)
	*_row = *row
	_row.Stage()
	return _row
}

// StageAndCommit appends row to the model stage and commit to the orm repo
func (row *Row) StageAndCommit() *Row {
	row.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRow(row)
	}
	return row
}

// DeleteStageAndCommit appends row to the model stage and commit to the orm repo
func (row *Row) DeleteStageAndCommit() *Row {
	row.Unstage()
	DeleteORMRow(row)
	return row
}

// StageCopyAndCommit appends a copy of row to the model stage and commit to the orm repo
func (row *Row) StageCopyAndCommit() *Row {
	_row := new(Row)
	*_row = *row
	_row.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRow(row)
	}
	return _row
}

// CreateORMRow enables dynamic staging of a Row instance
func CreateORMRow(row *Row) {
	row.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMRow(row)
	}
}

// DeleteORMRow enables dynamic staging of a Row instance
func DeleteORMRow(row *Row) {
	row.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMRow(row)
	}
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMCell(Cell *Cell)
	CreateORMElement(Element *Element)
	CreateORMMarkdownContent(MarkdownContent *MarkdownContent)
	CreateORMRow(Row *Row)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMCell(Cell *Cell)
	DeleteORMElement(Element *Element)
	DeleteORMMarkdownContent(MarkdownContent *MarkdownContent)
	DeleteORMRow(Row *Row)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Cells = make(map[*Cell]struct{})
	stage.Cells_mapString = make(map[string]*Cell)

	stage.Elements = make(map[*Element]struct{})
	stage.Elements_mapString = make(map[string]*Element)

	stage.MarkdownContents = make(map[*MarkdownContent]struct{})
	stage.MarkdownContents_mapString = make(map[string]*MarkdownContent)

	stage.Rows = make(map[*Row]struct{})
	stage.Rows_mapString = make(map[string]*Row)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Cells = nil
	stage.Cells_mapString = nil

	stage.Elements = nil
	stage.Elements_mapString = nil

	stage.MarkdownContents = nil
	stage.MarkdownContents_mapString = nil

	stage.Rows = nil
	stage.Rows_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

func init() {
	var __Dummy_time_variable time.Time
	_ = __Dummy_time_variable
	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
}

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: "{{GeneratedFieldNameValue}}"}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const StringEnumInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_Cell_Identifiers := make(map[*Cell]string)
	_ = map_Cell_Identifiers

	cellOrdered := []*Cell{}
	for cell := range stage.Cells {
		cellOrdered = append(cellOrdered, cell)
	}
	sort.Slice(cellOrdered[:], func(i, j int) bool {
		return cellOrdered[i].Name < cellOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Cell")
	for idx, cell := range cellOrdered {

		id = generatesIdentifier("Cell", idx, cell.Name)
		map_Cell_Identifiers[cell] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Cell")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", cell.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Cell %s values setup", cell.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(cell.Name))
		initializerStatements += setValueField

	}

	map_Element_Identifiers := make(map[*Element]string)
	_ = map_Element_Identifiers

	elementOrdered := []*Element{}
	for element := range stage.Elements {
		elementOrdered = append(elementOrdered, element)
	}
	sort.Slice(elementOrdered[:], func(i, j int) bool {
		return elementOrdered[i].Name < elementOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Element")
	for idx, element := range elementOrdered {

		id = generatesIdentifier("Element", idx, element.Name)
		map_Element_Identifiers[element] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Element")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", element.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Element %s values setup", element.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(element.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Content")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(element.Content))
		initializerStatements += setValueField

		if element.Type != "" {
			setValueField = StringEnumInitStatement
			setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Type")
			setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", "models."+element.Type.ToCodeString())
			initializerStatements += setValueField
		}

	}

	map_MarkdownContent_Identifiers := make(map[*MarkdownContent]string)
	_ = map_MarkdownContent_Identifiers

	markdowncontentOrdered := []*MarkdownContent{}
	for markdowncontent := range stage.MarkdownContents {
		markdowncontentOrdered = append(markdowncontentOrdered, markdowncontent)
	}
	sort.Slice(markdowncontentOrdered[:], func(i, j int) bool {
		return markdowncontentOrdered[i].Name < markdowncontentOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of MarkdownContent")
	for idx, markdowncontent := range markdowncontentOrdered {

		id = generatesIdentifier("MarkdownContent", idx, markdowncontent.Name)
		map_MarkdownContent_Identifiers[markdowncontent] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "MarkdownContent")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", markdowncontent.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// MarkdownContent %s values setup", markdowncontent.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(markdowncontent.Name))
		initializerStatements += setValueField

		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Content")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(markdowncontent.Content))
		initializerStatements += setValueField

	}

	map_Row_Identifiers := make(map[*Row]string)
	_ = map_Row_Identifiers

	rowOrdered := []*Row{}
	for row := range stage.Rows {
		rowOrdered = append(rowOrdered, row)
	}
	sort.Slice(rowOrdered[:], func(i, j int) bool {
		return rowOrdered[i].Name < rowOrdered[j].Name
	})
	identifiersDecl += fmt.Sprintf("\n\n	// Declarations of staged instances of Row")
	for idx, row := range rowOrdered {

		id = generatesIdentifier("Row", idx, row.Name)
		map_Row_Identifiers[row] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Row")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", row.Name)
		identifiersDecl += decl

		initializerStatements += fmt.Sprintf("\n\n	// Row %s values setup", row.Name)
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(row.Name))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, cell := range cellOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Cell", idx, cell.Name)
		map_Cell_Identifiers[cell] = id

		// Initialisation of values
	}

	for idx, element := range elementOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Element", idx, element.Name)
		map_Element_Identifiers[element] = id

		// Initialisation of values
		for _, _element := range element.SubElements {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "SubElements")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Element_Identifiers[_element])
			pointersInitializesStatements += setPointerField
		}

		for _, _row := range element.Rows {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Rows")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Row_Identifiers[_row])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, markdowncontent := range markdowncontentOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("MarkdownContent", idx, markdowncontent.Name)
		map_MarkdownContent_Identifiers[markdowncontent] = id

		// Initialisation of values
		if markdowncontent.Root != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Root")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Element_Identifiers[markdowncontent.Root])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, row := range rowOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Row", idx, row.Name)
		map_Row_Identifiers[row] = id

		// Initialisation of values
		for _, _cell := range row.Cells {
			setPointerField = SliceOfPointersFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Cells")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Cell_Identifiers[_cell])
			pointersInitializesStatements += setPointerField
		}

	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of enum utility functions
// Utility function for ElementType
// if enum values are string, it is stored with the value
// if enum values are int, they are stored with the code of the value
func (elementtype ElementType) ToString() (res string) {

	// migration of former implementation of enum
	switch elementtype {
	// insertion code per enum code
	case PARAGRAPH:
		res = "Paragraph"
	case TABLE:
		res = "Table"
	case TITLE:
		res = "Title"
	}
	return
}

func (elementtype *ElementType) FromString(input string) {

	switch input {
	// insertion code per enum code
	case "Paragraph":
		*elementtype = PARAGRAPH
	case "Table":
		*elementtype = TABLE
	case "Title":
		*elementtype = TITLE
	}
}

func (elementtype *ElementType) ToCodeString() (res string) {

	switch *elementtype {
	// insertion code per enum code
	case PARAGRAPH:
		res = "PARAGRAPH"
	case TABLE:
		res = "TABLE"
	case TITLE:
		res = "TITLE"
	}
	return
}

