// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmarkdown/go/db"
	"github.com/fullstack-lang/gongmarkdown/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_MarkdownContent_sql sql.NullBool
var dummy_MarkdownContent_time time.Duration
var dummy_MarkdownContent_sort sort.Float64Slice

// MarkdownContentAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model markdowncontentAPI
type MarkdownContentAPI struct {
	gorm.Model

	models.MarkdownContent_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	MarkdownContentPointersEncoding MarkdownContentPointersEncoding
}

// MarkdownContentPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type MarkdownContentPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field Root is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	RootID sql.NullInt64
}

// MarkdownContentDB describes a markdowncontent in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model markdowncontentDB
type MarkdownContentDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field markdowncontentDB.Name
	Name_Data sql.NullString

	// Declation for basic field markdowncontentDB.Content
	Content_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	MarkdownContentPointersEncoding
}

// MarkdownContentDBs arrays markdowncontentDBs
// swagger:response markdowncontentDBsResponse
type MarkdownContentDBs []MarkdownContentDB

// MarkdownContentDBResponse provides response
// swagger:response markdowncontentDBResponse
type MarkdownContentDBResponse struct {
	MarkdownContentDB
}

// MarkdownContentWOP is a MarkdownContent without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type MarkdownContentWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`
	// insertion for WOP pointer fields
}

var MarkdownContent_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
}

type BackRepoMarkdownContentStruct struct {
	// stores MarkdownContentDB according to their gorm ID
	Map_MarkdownContentDBID_MarkdownContentDB map[uint]*MarkdownContentDB

	// stores MarkdownContentDB ID according to MarkdownContent address
	Map_MarkdownContentPtr_MarkdownContentDBID map[*models.MarkdownContent]uint

	// stores MarkdownContent according to their gorm ID
	Map_MarkdownContentDBID_MarkdownContentPtr map[uint]*models.MarkdownContent

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoMarkdownContent.stage
	return
}

func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) GetDB() db.DBInterface {
	return backRepoMarkdownContent.db
}

// GetMarkdownContentDBFromMarkdownContentPtr is a handy function to access the back repo instance from the stage instance
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) GetMarkdownContentDBFromMarkdownContentPtr(markdowncontent *models.MarkdownContent) (markdowncontentDB *MarkdownContentDB) {
	id := backRepoMarkdownContent.Map_MarkdownContentPtr_MarkdownContentDBID[markdowncontent]
	markdowncontentDB = backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB[id]
	return
}

// BackRepoMarkdownContent.CommitPhaseOne commits all staged instances of MarkdownContent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for markdowncontent := range stage.MarkdownContents {
		backRepoMarkdownContent.CommitPhaseOneInstance(markdowncontent)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, markdowncontent := range backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr {
		if _, ok := stage.MarkdownContents[markdowncontent]; !ok {
			backRepoMarkdownContent.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoMarkdownContent.CommitDeleteInstance commits deletion of MarkdownContent to the BackRepo
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) CommitDeleteInstance(id uint) (Error error) {

	markdowncontent := backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr[id]

	// markdowncontent is not staged anymore, remove markdowncontentDB
	markdowncontentDB := backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB[id]
	db, _ := backRepoMarkdownContent.db.Unscoped()
	_, err := db.Delete(markdowncontentDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoMarkdownContent.Map_MarkdownContentPtr_MarkdownContentDBID, markdowncontent)
	delete(backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr, id)
	delete(backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB, id)

	return
}

// BackRepoMarkdownContent.CommitPhaseOneInstance commits markdowncontent staged instances of MarkdownContent to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) CommitPhaseOneInstance(markdowncontent *models.MarkdownContent) (Error error) {

	// check if the markdowncontent is not commited yet
	if _, ok := backRepoMarkdownContent.Map_MarkdownContentPtr_MarkdownContentDBID[markdowncontent]; ok {
		return
	}

	// initiate markdowncontent
	var markdowncontentDB MarkdownContentDB
	markdowncontentDB.CopyBasicFieldsFromMarkdownContent(markdowncontent)

	_, err := backRepoMarkdownContent.db.Create(&markdowncontentDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoMarkdownContent.Map_MarkdownContentPtr_MarkdownContentDBID[markdowncontent] = markdowncontentDB.ID
	backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr[markdowncontentDB.ID] = markdowncontent
	backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB[markdowncontentDB.ID] = &markdowncontentDB

	return
}

// BackRepoMarkdownContent.CommitPhaseTwo commits all staged instances of MarkdownContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, markdowncontent := range backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr {
		backRepoMarkdownContent.CommitPhaseTwoInstance(backRepo, idx, markdowncontent)
	}

	return
}

// BackRepoMarkdownContent.CommitPhaseTwoInstance commits {{structname }} of models.MarkdownContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, markdowncontent *models.MarkdownContent) (Error error) {

	// fetch matching markdowncontentDB
	if markdowncontentDB, ok := backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB[idx]; ok {

		markdowncontentDB.CopyBasicFieldsFromMarkdownContent(markdowncontent)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value markdowncontent.Root translates to updating the markdowncontent.RootID
		markdowncontentDB.RootID.Valid = true // allow for a 0 value (nil association)
		if markdowncontent.Root != nil {
			if RootId, ok := backRepo.BackRepoElement.Map_ElementPtr_ElementDBID[markdowncontent.Root]; ok {
				markdowncontentDB.RootID.Int64 = int64(RootId)
				markdowncontentDB.RootID.Valid = true
			}
		} else {
			markdowncontentDB.RootID.Int64 = 0
			markdowncontentDB.RootID.Valid = true
		}

		_, err := backRepoMarkdownContent.db.Save(markdowncontentDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown MarkdownContent intance %s", markdowncontent.Name))
		return err
	}

	return
}

// BackRepoMarkdownContent.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) CheckoutPhaseOne() (Error error) {

	markdowncontentDBArray := make([]MarkdownContentDB, 0)
	_, err := backRepoMarkdownContent.db.Find(&markdowncontentDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	markdowncontentInstancesToBeRemovedFromTheStage := make(map[*models.MarkdownContent]any)
	for key, value := range backRepoMarkdownContent.stage.MarkdownContents {
		markdowncontentInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, markdowncontentDB := range markdowncontentDBArray {
		backRepoMarkdownContent.CheckoutPhaseOneInstance(&markdowncontentDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		markdowncontent, ok := backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr[markdowncontentDB.ID]
		if ok {
			delete(markdowncontentInstancesToBeRemovedFromTheStage, markdowncontent)
		}
	}

	// remove from stage and back repo's 3 maps all markdowncontents that are not in the checkout
	for markdowncontent := range markdowncontentInstancesToBeRemovedFromTheStage {
		markdowncontent.Unstage(backRepoMarkdownContent.GetStage())

		// remove instance from the back repo 3 maps
		markdowncontentID := backRepoMarkdownContent.Map_MarkdownContentPtr_MarkdownContentDBID[markdowncontent]
		delete(backRepoMarkdownContent.Map_MarkdownContentPtr_MarkdownContentDBID, markdowncontent)
		delete(backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB, markdowncontentID)
		delete(backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr, markdowncontentID)
	}

	return
}

// CheckoutPhaseOneInstance takes a markdowncontentDB that has been found in the DB, updates the backRepo and stages the
// models version of the markdowncontentDB
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) CheckoutPhaseOneInstance(markdowncontentDB *MarkdownContentDB) (Error error) {

	markdowncontent, ok := backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr[markdowncontentDB.ID]
	if !ok {
		markdowncontent = new(models.MarkdownContent)

		backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr[markdowncontentDB.ID] = markdowncontent
		backRepoMarkdownContent.Map_MarkdownContentPtr_MarkdownContentDBID[markdowncontent] = markdowncontentDB.ID

		// append model store with the new element
		markdowncontent.Name = markdowncontentDB.Name_Data.String
		markdowncontent.Stage(backRepoMarkdownContent.GetStage())
	}
	markdowncontentDB.CopyBasicFieldsToMarkdownContent(markdowncontent)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	markdowncontent.Stage(backRepoMarkdownContent.GetStage())

	// preserve pointer to markdowncontentDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_MarkdownContentDBID_MarkdownContentDB)[markdowncontentDB hold variable pointers
	markdowncontentDB_Data := *markdowncontentDB
	preservedPtrToMarkdownContent := &markdowncontentDB_Data
	backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB[markdowncontentDB.ID] = preservedPtrToMarkdownContent

	return
}

// BackRepoMarkdownContent.CheckoutPhaseTwo Checkouts all staged instances of MarkdownContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, markdowncontentDB := range backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB {
		backRepoMarkdownContent.CheckoutPhaseTwoInstance(backRepo, markdowncontentDB)
	}
	return
}

// BackRepoMarkdownContent.CheckoutPhaseTwoInstance Checkouts staged instances of MarkdownContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, markdowncontentDB *MarkdownContentDB) (Error error) {

	markdowncontent := backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr[markdowncontentDB.ID]

	markdowncontentDB.DecodePointers(backRepo, markdowncontent)

	return
}

func (markdowncontentDB *MarkdownContentDB) DecodePointers(backRepo *BackRepoStruct, markdowncontent *models.MarkdownContent) {

	// insertion point for checkout of pointer encoding
	// Root field	
	{
		id := markdowncontentDB.RootID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoElement.Map_ElementDBID_ElementPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: markdowncontent.Root, unknown pointer id", id)
			}

			// updates only if field has changed
			if markdowncontent.Root == nil || markdowncontent.Root != tmp {
				markdowncontent.Root = tmp
			}
		} else {
			markdowncontent.Root = nil
		}
	}
	
	return
}

// CommitMarkdownContent allows commit of a single markdowncontent (if already staged)
func (backRepo *BackRepoStruct) CommitMarkdownContent(markdowncontent *models.MarkdownContent) {
	backRepo.BackRepoMarkdownContent.CommitPhaseOneInstance(markdowncontent)
	if id, ok := backRepo.BackRepoMarkdownContent.Map_MarkdownContentPtr_MarkdownContentDBID[markdowncontent]; ok {
		backRepo.BackRepoMarkdownContent.CommitPhaseTwoInstance(backRepo, id, markdowncontent)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitMarkdownContent allows checkout of a single markdowncontent (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutMarkdownContent(markdowncontent *models.MarkdownContent) {
	// check if the markdowncontent is staged
	if _, ok := backRepo.BackRepoMarkdownContent.Map_MarkdownContentPtr_MarkdownContentDBID[markdowncontent]; ok {

		if id, ok := backRepo.BackRepoMarkdownContent.Map_MarkdownContentPtr_MarkdownContentDBID[markdowncontent]; ok {
			var markdowncontentDB MarkdownContentDB
			markdowncontentDB.ID = id

			if _, err := backRepo.BackRepoMarkdownContent.db.First(&markdowncontentDB, id); err != nil {
				log.Fatalln("CheckoutMarkdownContent : Problem with getting object with id:", id)
			}
			backRepo.BackRepoMarkdownContent.CheckoutPhaseOneInstance(&markdowncontentDB)
			backRepo.BackRepoMarkdownContent.CheckoutPhaseTwoInstance(backRepo, &markdowncontentDB)
		}
	}
}

// CopyBasicFieldsFromMarkdownContent
func (markdowncontentDB *MarkdownContentDB) CopyBasicFieldsFromMarkdownContent(markdowncontent *models.MarkdownContent) {
	// insertion point for fields commit

	markdowncontentDB.Name_Data.String = markdowncontent.Name
	markdowncontentDB.Name_Data.Valid = true

	markdowncontentDB.Content_Data.String = markdowncontent.Content
	markdowncontentDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromMarkdownContent_WOP
func (markdowncontentDB *MarkdownContentDB) CopyBasicFieldsFromMarkdownContent_WOP(markdowncontent *models.MarkdownContent_WOP) {
	// insertion point for fields commit

	markdowncontentDB.Name_Data.String = markdowncontent.Name
	markdowncontentDB.Name_Data.Valid = true

	markdowncontentDB.Content_Data.String = markdowncontent.Content
	markdowncontentDB.Content_Data.Valid = true
}

// CopyBasicFieldsFromMarkdownContentWOP
func (markdowncontentDB *MarkdownContentDB) CopyBasicFieldsFromMarkdownContentWOP(markdowncontent *MarkdownContentWOP) {
	// insertion point for fields commit

	markdowncontentDB.Name_Data.String = markdowncontent.Name
	markdowncontentDB.Name_Data.Valid = true

	markdowncontentDB.Content_Data.String = markdowncontent.Content
	markdowncontentDB.Content_Data.Valid = true
}

// CopyBasicFieldsToMarkdownContent
func (markdowncontentDB *MarkdownContentDB) CopyBasicFieldsToMarkdownContent(markdowncontent *models.MarkdownContent) {
	// insertion point for checkout of basic fields (back repo to stage)
	markdowncontent.Name = markdowncontentDB.Name_Data.String
	markdowncontent.Content = markdowncontentDB.Content_Data.String
}

// CopyBasicFieldsToMarkdownContent_WOP
func (markdowncontentDB *MarkdownContentDB) CopyBasicFieldsToMarkdownContent_WOP(markdowncontent *models.MarkdownContent_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	markdowncontent.Name = markdowncontentDB.Name_Data.String
	markdowncontent.Content = markdowncontentDB.Content_Data.String
}

// CopyBasicFieldsToMarkdownContentWOP
func (markdowncontentDB *MarkdownContentDB) CopyBasicFieldsToMarkdownContentWOP(markdowncontent *MarkdownContentWOP) {
	markdowncontent.ID = int(markdowncontentDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	markdowncontent.Name = markdowncontentDB.Name_Data.String
	markdowncontent.Content = markdowncontentDB.Content_Data.String
}

// Backup generates a json file from a slice of all MarkdownContentDB instances in the backrepo
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "MarkdownContentDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MarkdownContentDB, 0)
	for _, markdowncontentDB := range backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB {
		forBackup = append(forBackup, markdowncontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json MarkdownContent ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json MarkdownContent file", err.Error())
	}
}

// Backup generates a json file from a slice of all MarkdownContentDB instances in the backrepo
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*MarkdownContentDB, 0)
	for _, markdowncontentDB := range backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB {
		forBackup = append(forBackup, markdowncontentDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("MarkdownContent")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&MarkdownContent_Fields, -1)
	for _, markdowncontentDB := range forBackup {

		var markdowncontentWOP MarkdownContentWOP
		markdowncontentDB.CopyBasicFieldsToMarkdownContentWOP(&markdowncontentWOP)

		row := sh.AddRow()
		row.WriteStruct(&markdowncontentWOP, -1)
	}
}

// RestoreXL from the "MarkdownContent" sheet all MarkdownContentDB instances
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoMarkdownContentid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["MarkdownContent"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoMarkdownContent.rowVisitorMarkdownContent)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) rowVisitorMarkdownContent(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var markdowncontentWOP MarkdownContentWOP
		row.ReadStruct(&markdowncontentWOP)

		// add the unmarshalled struct to the stage
		markdowncontentDB := new(MarkdownContentDB)
		markdowncontentDB.CopyBasicFieldsFromMarkdownContentWOP(&markdowncontentWOP)

		markdowncontentDB_ID_atBackupTime := markdowncontentDB.ID
		markdowncontentDB.ID = 0
		_, err := backRepoMarkdownContent.db.Create(markdowncontentDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB[markdowncontentDB.ID] = markdowncontentDB
		BackRepoMarkdownContentid_atBckpTime_newID[markdowncontentDB_ID_atBackupTime] = markdowncontentDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "MarkdownContentDB.json" in dirPath that stores an array
// of MarkdownContentDB and stores it in the database
// the map BackRepoMarkdownContentid_atBckpTime_newID is updated accordingly
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoMarkdownContentid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "MarkdownContentDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json MarkdownContent file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*MarkdownContentDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_MarkdownContentDBID_MarkdownContentDB
	for _, markdowncontentDB := range forRestore {

		markdowncontentDB_ID_atBackupTime := markdowncontentDB.ID
		markdowncontentDB.ID = 0
		_, err := backRepoMarkdownContent.db.Create(markdowncontentDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB[markdowncontentDB.ID] = markdowncontentDB
		BackRepoMarkdownContentid_atBckpTime_newID[markdowncontentDB_ID_atBackupTime] = markdowncontentDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json MarkdownContent file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<MarkdownContent>id_atBckpTime_newID
// to compute new index
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) RestorePhaseTwo() {

	for _, markdowncontentDB := range backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB {

		// next line of code is to avert unused variable compilation error
		_ = markdowncontentDB

		// insertion point for reindexing pointers encoding
		// reindexing Root field
		if markdowncontentDB.RootID.Int64 != 0 {
			markdowncontentDB.RootID.Int64 = int64(BackRepoElementid_atBckpTime_newID[uint(markdowncontentDB.RootID.Int64)])
			markdowncontentDB.RootID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoMarkdownContent.db.Model(markdowncontentDB)
		_, err := db.Updates(*markdowncontentDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoMarkdownContent.ResetReversePointers commits all staged instances of MarkdownContent to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, markdowncontent := range backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentPtr {
		backRepoMarkdownContent.ResetReversePointersInstance(backRepo, idx, markdowncontent)
	}

	return
}

func (backRepoMarkdownContent *BackRepoMarkdownContentStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, markdowncontent *models.MarkdownContent) (Error error) {

	// fetch matching markdowncontentDB
	if markdowncontentDB, ok := backRepoMarkdownContent.Map_MarkdownContentDBID_MarkdownContentDB[idx]; ok {
		_ = markdowncontentDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoMarkdownContentid_atBckpTime_newID map[uint]uint
