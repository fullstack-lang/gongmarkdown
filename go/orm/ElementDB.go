// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmarkdown/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Element_sql sql.NullBool
var dummy_Element_time time.Duration
var dummy_Element_sort sort.Float64Slice

// ElementAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model elementAPI
type ElementAPI struct {
	gorm.Model

	models.Element

	// encoding of pointers
	ElementPointersEnconding
}

// ElementPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ElementPointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// Implementation of a reverse ID for field Element{}.SubElements []*Element
	Element_SubElementsDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Element_SubElementsDBID_Index sql.NullInt64
}

// ElementDB describes a element in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model elementDB
type ElementDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field elementDB.Name
	Name_Data sql.NullString

	// Declation for basic field elementDB.Content
	Content_Data sql.NullString

	// Declation for basic field elementDB.Type
	Type_Data sql.NullString
	// encoding of pointers
	ElementPointersEnconding
}

// ElementDBs arrays elementDBs
// swagger:response elementDBsResponse
type ElementDBs []ElementDB

// ElementDBResponse provides response
// swagger:response elementDBResponse
type ElementDBResponse struct {
	ElementDB
}

// ElementWOP is a Element without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ElementWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`

	Type models.ElementType `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Element_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
	"Type",
}

type BackRepoElementStruct struct {
	// stores ElementDB according to their gorm ID
	Map_ElementDBID_ElementDB *map[uint]*ElementDB

	// stores ElementDB ID according to Element address
	Map_ElementPtr_ElementDBID *map[*models.Element]uint

	// stores Element according to their gorm ID
	Map_ElementDBID_ElementPtr *map[uint]*models.Element

	db *gorm.DB
}

func (backRepoElement *BackRepoElementStruct) GetDB() *gorm.DB {
	return backRepoElement.db
}

// GetElementDBFromElementPtr is a handy function to access the back repo instance from the stage instance
func (backRepoElement *BackRepoElementStruct) GetElementDBFromElementPtr(element *models.Element) (elementDB *ElementDB) {
	id := (*backRepoElement.Map_ElementPtr_ElementDBID)[element]
	elementDB = (*backRepoElement.Map_ElementDBID_ElementDB)[id]
	return
}

// BackRepoElement.Init set up the BackRepo of the Element
func (backRepoElement *BackRepoElementStruct) Init(db *gorm.DB) (Error error) {

	if backRepoElement.Map_ElementDBID_ElementPtr != nil {
		err := errors.New("In Init, backRepoElement.Map_ElementDBID_ElementPtr should be nil")
		return err
	}

	if backRepoElement.Map_ElementDBID_ElementDB != nil {
		err := errors.New("In Init, backRepoElement.Map_ElementDBID_ElementDB should be nil")
		return err
	}

	if backRepoElement.Map_ElementPtr_ElementDBID != nil {
		err := errors.New("In Init, backRepoElement.Map_ElementPtr_ElementDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Element, 0)
	backRepoElement.Map_ElementDBID_ElementPtr = &tmp

	tmpDB := make(map[uint]*ElementDB, 0)
	backRepoElement.Map_ElementDBID_ElementDB = &tmpDB

	tmpID := make(map[*models.Element]uint, 0)
	backRepoElement.Map_ElementPtr_ElementDBID = &tmpID

	backRepoElement.db = db
	return
}

// BackRepoElement.CommitPhaseOne commits all staged instances of Element to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoElement *BackRepoElementStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for element := range stage.Elements {
		backRepoElement.CommitPhaseOneInstance(element)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, element := range *backRepoElement.Map_ElementDBID_ElementPtr {
		if _, ok := stage.Elements[element]; !ok {
			backRepoElement.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoElement.CommitDeleteInstance commits deletion of Element to the BackRepo
func (backRepoElement *BackRepoElementStruct) CommitDeleteInstance(id uint) (Error error) {

	element := (*backRepoElement.Map_ElementDBID_ElementPtr)[id]

	// element is not staged anymore, remove elementDB
	elementDB := (*backRepoElement.Map_ElementDBID_ElementDB)[id]
	query := backRepoElement.db.Unscoped().Delete(&elementDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoElement.Map_ElementPtr_ElementDBID), element)
	delete((*backRepoElement.Map_ElementDBID_ElementPtr), id)
	delete((*backRepoElement.Map_ElementDBID_ElementDB), id)

	return
}

// BackRepoElement.CommitPhaseOneInstance commits element staged instances of Element to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoElement *BackRepoElementStruct) CommitPhaseOneInstance(element *models.Element) (Error error) {

	// check if the element is not commited yet
	if _, ok := (*backRepoElement.Map_ElementPtr_ElementDBID)[element]; ok {
		return
	}

	// initiate element
	var elementDB ElementDB
	elementDB.CopyBasicFieldsFromElement(element)

	query := backRepoElement.db.Create(&elementDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoElement.Map_ElementPtr_ElementDBID)[element] = elementDB.ID
	(*backRepoElement.Map_ElementDBID_ElementPtr)[elementDB.ID] = element
	(*backRepoElement.Map_ElementDBID_ElementDB)[elementDB.ID] = &elementDB

	return
}

// BackRepoElement.CommitPhaseTwo commits all staged instances of Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, element := range *backRepoElement.Map_ElementDBID_ElementPtr {
		backRepoElement.CommitPhaseTwoInstance(backRepo, idx, element)
	}

	return
}

// BackRepoElement.CommitPhaseTwoInstance commits {{structname }} of models.Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, element *models.Element) (Error error) {

	// fetch matching elementDB
	if elementDB, ok := (*backRepoElement.Map_ElementDBID_ElementDB)[idx]; ok {

		elementDB.CopyBasicFieldsFromElement(element)

		// insertion point for translating pointers encodings into actual pointers
		// This loop encodes the slice of pointers element.SubElements into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, elementAssocEnd := range element.SubElements {

			// get the back repo instance at the association end
			elementAssocEnd_DB :=
				backRepo.BackRepoElement.GetElementDBFromElementPtr(elementAssocEnd)

			// encode reverse pointer in the association end back repo instance
			elementAssocEnd_DB.Element_SubElementsDBID.Int64 = int64(elementDB.ID)
			elementAssocEnd_DB.Element_SubElementsDBID.Valid = true
			elementAssocEnd_DB.Element_SubElementsDBID_Index.Int64 = int64(idx)
			elementAssocEnd_DB.Element_SubElementsDBID_Index.Valid = true
			if q := backRepoElement.db.Save(elementAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		// This loop encodes the slice of pointers element.Rows into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, rowAssocEnd := range element.Rows {

			// get the back repo instance at the association end
			rowAssocEnd_DB :=
				backRepo.BackRepoRow.GetRowDBFromRowPtr(rowAssocEnd)

			// encode reverse pointer in the association end back repo instance
			rowAssocEnd_DB.Element_RowsDBID.Int64 = int64(elementDB.ID)
			rowAssocEnd_DB.Element_RowsDBID.Valid = true
			rowAssocEnd_DB.Element_RowsDBID_Index.Int64 = int64(idx)
			rowAssocEnd_DB.Element_RowsDBID_Index.Valid = true
			if q := backRepoElement.db.Save(rowAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoElement.db.Save(&elementDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Element intance %s", element.Name))
		return err
	}

	return
}

// BackRepoElement.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseOne() (Error error) {

	elementDBArray := make([]ElementDB, 0)
	query := backRepoElement.db.Find(&elementDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	elementInstancesToBeRemovedFromTheStage := make(map[*models.Element]any)
	for key, value := range models.Stage.Elements {
		elementInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, elementDB := range elementDBArray {
		backRepoElement.CheckoutPhaseOneInstance(&elementDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		element, ok := (*backRepoElement.Map_ElementDBID_ElementPtr)[elementDB.ID]
		if ok {
			delete(elementInstancesToBeRemovedFromTheStage, element)
		}
	}

	// remove from stage and back repo's 3 maps all elements that are not in the checkout
	for element := range elementInstancesToBeRemovedFromTheStage {
		element.Unstage()

		// remove instance from the back repo 3 maps
		elementID := (*backRepoElement.Map_ElementPtr_ElementDBID)[element]
		delete((*backRepoElement.Map_ElementPtr_ElementDBID), element)
		delete((*backRepoElement.Map_ElementDBID_ElementDB), elementID)
		delete((*backRepoElement.Map_ElementDBID_ElementPtr), elementID)
	}

	return
}

// CheckoutPhaseOneInstance takes a elementDB that has been found in the DB, updates the backRepo and stages the
// models version of the elementDB
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseOneInstance(elementDB *ElementDB) (Error error) {

	element, ok := (*backRepoElement.Map_ElementDBID_ElementPtr)[elementDB.ID]
	if !ok {
		element = new(models.Element)

		(*backRepoElement.Map_ElementDBID_ElementPtr)[elementDB.ID] = element
		(*backRepoElement.Map_ElementPtr_ElementDBID)[element] = elementDB.ID

		// append model store with the new element
		element.Name = elementDB.Name_Data.String
		element.Stage()
	}
	elementDB.CopyBasicFieldsToElement(element)

	// preserve pointer to elementDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ElementDBID_ElementDB)[elementDB hold variable pointers
	elementDB_Data := *elementDB
	preservedPtrToElement := &elementDB_Data
	(*backRepoElement.Map_ElementDBID_ElementDB)[elementDB.ID] = preservedPtrToElement

	return
}

// BackRepoElement.CheckoutPhaseTwo Checkouts all staged instances of Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, elementDB := range *backRepoElement.Map_ElementDBID_ElementDB {
		backRepoElement.CheckoutPhaseTwoInstance(backRepo, elementDB)
	}
	return
}

// BackRepoElement.CheckoutPhaseTwoInstance Checkouts staged instances of Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, elementDB *ElementDB) (Error error) {

	element := (*backRepoElement.Map_ElementDBID_ElementPtr)[elementDB.ID]
	_ = element // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// This loop redeem element.SubElements in the stage from the encode in the back repo
	// It parses all ElementDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	element.SubElements = element.SubElements[:0]
	// 2. loop all instances in the type in the association end
	for _, elementDB_AssocEnd := range *backRepo.BackRepoElement.Map_ElementDBID_ElementDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if elementDB_AssocEnd.Element_SubElementsDBID.Int64 == int64(elementDB.ID) {
			// 4. fetch the associated instance in the stage
			element_AssocEnd := (*backRepo.BackRepoElement.Map_ElementDBID_ElementPtr)[elementDB_AssocEnd.ID]
			// 5. append it the association slice
			element.SubElements = append(element.SubElements, element_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(element.SubElements, func(i, j int) bool {
		elementDB_i_ID := (*backRepo.BackRepoElement.Map_ElementPtr_ElementDBID)[element.SubElements[i]]
		elementDB_j_ID := (*backRepo.BackRepoElement.Map_ElementPtr_ElementDBID)[element.SubElements[j]]

		elementDB_i := (*backRepo.BackRepoElement.Map_ElementDBID_ElementDB)[elementDB_i_ID]
		elementDB_j := (*backRepo.BackRepoElement.Map_ElementDBID_ElementDB)[elementDB_j_ID]

		return elementDB_i.Element_SubElementsDBID_Index.Int64 < elementDB_j.Element_SubElementsDBID_Index.Int64
	})

	// This loop redeem element.Rows in the stage from the encode in the back repo
	// It parses all RowDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	element.Rows = element.Rows[:0]
	// 2. loop all instances in the type in the association end
	for _, rowDB_AssocEnd := range *backRepo.BackRepoRow.Map_RowDBID_RowDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if rowDB_AssocEnd.Element_RowsDBID.Int64 == int64(elementDB.ID) {
			// 4. fetch the associated instance in the stage
			row_AssocEnd := (*backRepo.BackRepoRow.Map_RowDBID_RowPtr)[rowDB_AssocEnd.ID]
			// 5. append it the association slice
			element.Rows = append(element.Rows, row_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(element.Rows, func(i, j int) bool {
		rowDB_i_ID := (*backRepo.BackRepoRow.Map_RowPtr_RowDBID)[element.Rows[i]]
		rowDB_j_ID := (*backRepo.BackRepoRow.Map_RowPtr_RowDBID)[element.Rows[j]]

		rowDB_i := (*backRepo.BackRepoRow.Map_RowDBID_RowDB)[rowDB_i_ID]
		rowDB_j := (*backRepo.BackRepoRow.Map_RowDBID_RowDB)[rowDB_j_ID]

		return rowDB_i.Element_RowsDBID_Index.Int64 < rowDB_j.Element_RowsDBID_Index.Int64
	})

	return
}

// CommitElement allows commit of a single element (if already staged)
func (backRepo *BackRepoStruct) CommitElement(element *models.Element) {
	backRepo.BackRepoElement.CommitPhaseOneInstance(element)
	if id, ok := (*backRepo.BackRepoElement.Map_ElementPtr_ElementDBID)[element]; ok {
		backRepo.BackRepoElement.CommitPhaseTwoInstance(backRepo, id, element)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitElement allows checkout of a single element (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutElement(element *models.Element) {
	// check if the element is staged
	if _, ok := (*backRepo.BackRepoElement.Map_ElementPtr_ElementDBID)[element]; ok {

		if id, ok := (*backRepo.BackRepoElement.Map_ElementPtr_ElementDBID)[element]; ok {
			var elementDB ElementDB
			elementDB.ID = id

			if err := backRepo.BackRepoElement.db.First(&elementDB, id).Error; err != nil {
				log.Panicln("CheckoutElement : Problem with getting object with id:", id)
			}
			backRepo.BackRepoElement.CheckoutPhaseOneInstance(&elementDB)
			backRepo.BackRepoElement.CheckoutPhaseTwoInstance(backRepo, &elementDB)
		}
	}
}

// CopyBasicFieldsFromElement
func (elementDB *ElementDB) CopyBasicFieldsFromElement(element *models.Element) {
	// insertion point for fields commit

	elementDB.Name_Data.String = element.Name
	elementDB.Name_Data.Valid = true

	elementDB.Content_Data.String = element.Content
	elementDB.Content_Data.Valid = true

	elementDB.Type_Data.String = element.Type.ToString()
	elementDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromElementWOP
func (elementDB *ElementDB) CopyBasicFieldsFromElementWOP(element *ElementWOP) {
	// insertion point for fields commit

	elementDB.Name_Data.String = element.Name
	elementDB.Name_Data.Valid = true

	elementDB.Content_Data.String = element.Content
	elementDB.Content_Data.Valid = true

	elementDB.Type_Data.String = element.Type.ToString()
	elementDB.Type_Data.Valid = true
}

// CopyBasicFieldsToElement
func (elementDB *ElementDB) CopyBasicFieldsToElement(element *models.Element) {
	// insertion point for checkout of basic fields (back repo to stage)
	element.Name = elementDB.Name_Data.String
	element.Content = elementDB.Content_Data.String
	element.Type.FromString(elementDB.Type_Data.String)
}

// CopyBasicFieldsToElementWOP
func (elementDB *ElementDB) CopyBasicFieldsToElementWOP(element *ElementWOP) {
	element.ID = int(elementDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	element.Name = elementDB.Name_Data.String
	element.Content = elementDB.Content_Data.String
	element.Type.FromString(elementDB.Type_Data.String)
}

// Backup generates a json file from a slice of all ElementDB instances in the backrepo
func (backRepoElement *BackRepoElementStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ElementDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ElementDB, 0)
	for _, elementDB := range *backRepoElement.Map_ElementDBID_ElementDB {
		forBackup = append(forBackup, elementDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Element ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Element file", err.Error())
	}
}

// Backup generates a json file from a slice of all ElementDB instances in the backrepo
func (backRepoElement *BackRepoElementStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ElementDB, 0)
	for _, elementDB := range *backRepoElement.Map_ElementDBID_ElementDB {
		forBackup = append(forBackup, elementDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Element")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Element_Fields, -1)
	for _, elementDB := range forBackup {

		var elementWOP ElementWOP
		elementDB.CopyBasicFieldsToElementWOP(&elementWOP)

		row := sh.AddRow()
		row.WriteStruct(&elementWOP, -1)
	}
}

// RestoreXL from the "Element" sheet all ElementDB instances
func (backRepoElement *BackRepoElementStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoElementid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Element"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoElement.rowVisitorElement)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoElement *BackRepoElementStruct) rowVisitorElement(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var elementWOP ElementWOP
		row.ReadStruct(&elementWOP)

		// add the unmarshalled struct to the stage
		elementDB := new(ElementDB)
		elementDB.CopyBasicFieldsFromElementWOP(&elementWOP)

		elementDB_ID_atBackupTime := elementDB.ID
		elementDB.ID = 0
		query := backRepoElement.db.Create(elementDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoElement.Map_ElementDBID_ElementDB)[elementDB.ID] = elementDB
		BackRepoElementid_atBckpTime_newID[elementDB_ID_atBackupTime] = elementDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ElementDB.json" in dirPath that stores an array
// of ElementDB and stores it in the database
// the map BackRepoElementid_atBckpTime_newID is updated accordingly
func (backRepoElement *BackRepoElementStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoElementid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ElementDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Element file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ElementDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ElementDBID_ElementDB
	for _, elementDB := range forRestore {

		elementDB_ID_atBackupTime := elementDB.ID
		elementDB.ID = 0
		query := backRepoElement.db.Create(elementDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoElement.Map_ElementDBID_ElementDB)[elementDB.ID] = elementDB
		BackRepoElementid_atBckpTime_newID[elementDB_ID_atBackupTime] = elementDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Element file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Element>id_atBckpTime_newID
// to compute new index
func (backRepoElement *BackRepoElementStruct) RestorePhaseTwo() {

	for _, elementDB := range *backRepoElement.Map_ElementDBID_ElementDB {

		// next line of code is to avert unused variable compilation error
		_ = elementDB

		// insertion point for reindexing pointers encoding
		// This reindex element.SubElements
		if elementDB.Element_SubElementsDBID.Int64 != 0 {
			elementDB.Element_SubElementsDBID.Int64 =
				int64(BackRepoElementid_atBckpTime_newID[uint(elementDB.Element_SubElementsDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoElement.db.Model(elementDB).Updates(*elementDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoElementid_atBckpTime_newID map[uint]uint
