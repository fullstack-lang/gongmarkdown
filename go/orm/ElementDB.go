// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmarkdown/go/db"
	"github.com/fullstack-lang/gongmarkdown/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Element_sql sql.NullBool
var dummy_Element_time time.Duration
var dummy_Element_sort sort.Float64Slice

// ElementAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model elementAPI
type ElementAPI struct {
	gorm.Model

	models.Element_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ElementPointersEncoding ElementPointersEncoding
}

// ElementPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ElementPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field SubElements is a slice of pointers to another Struct (optional or 0..1)
	SubElements IntSlice `gorm:"type:TEXT"`

	// field Rows is a slice of pointers to another Struct (optional or 0..1)
	Rows IntSlice `gorm:"type:TEXT"`
}

// ElementDB describes a element in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model elementDB
type ElementDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field elementDB.Name
	Name_Data sql.NullString

	// Declation for basic field elementDB.Content
	Content_Data sql.NullString

	// Declation for basic field elementDB.Type
	Type_Data sql.NullString

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ElementPointersEncoding
}

// ElementDBs arrays elementDBs
// swagger:response elementDBsResponse
type ElementDBs []ElementDB

// ElementDBResponse provides response
// swagger:response elementDBResponse
type ElementDBResponse struct {
	ElementDB
}

// ElementWOP is a Element without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ElementWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Content string `xlsx:"2"`

	Type models.ElementType `xlsx:"3"`
	// insertion for WOP pointer fields
}

var Element_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Content",
	"Type",
}

type BackRepoElementStruct struct {
	// stores ElementDB according to their gorm ID
	Map_ElementDBID_ElementDB map[uint]*ElementDB

	// stores ElementDB ID according to Element address
	Map_ElementPtr_ElementDBID map[*models.Element]uint

	// stores Element according to their gorm ID
	Map_ElementDBID_ElementPtr map[uint]*models.Element

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoElement *BackRepoElementStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoElement.stage
	return
}

func (backRepoElement *BackRepoElementStruct) GetDB() db.DBInterface {
	return backRepoElement.db
}

// GetElementDBFromElementPtr is a handy function to access the back repo instance from the stage instance
func (backRepoElement *BackRepoElementStruct) GetElementDBFromElementPtr(element *models.Element) (elementDB *ElementDB) {
	id := backRepoElement.Map_ElementPtr_ElementDBID[element]
	elementDB = backRepoElement.Map_ElementDBID_ElementDB[id]
	return
}

// BackRepoElement.CommitPhaseOne commits all staged instances of Element to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoElement *BackRepoElementStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for element := range stage.Elements {
		backRepoElement.CommitPhaseOneInstance(element)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, element := range backRepoElement.Map_ElementDBID_ElementPtr {
		if _, ok := stage.Elements[element]; !ok {
			backRepoElement.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoElement.CommitDeleteInstance commits deletion of Element to the BackRepo
func (backRepoElement *BackRepoElementStruct) CommitDeleteInstance(id uint) (Error error) {

	element := backRepoElement.Map_ElementDBID_ElementPtr[id]

	// element is not staged anymore, remove elementDB
	elementDB := backRepoElement.Map_ElementDBID_ElementDB[id]
	db, _ := backRepoElement.db.Unscoped()
	_, err := db.Delete(elementDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoElement.Map_ElementPtr_ElementDBID, element)
	delete(backRepoElement.Map_ElementDBID_ElementPtr, id)
	delete(backRepoElement.Map_ElementDBID_ElementDB, id)

	return
}

// BackRepoElement.CommitPhaseOneInstance commits element staged instances of Element to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoElement *BackRepoElementStruct) CommitPhaseOneInstance(element *models.Element) (Error error) {

	// check if the element is not commited yet
	if _, ok := backRepoElement.Map_ElementPtr_ElementDBID[element]; ok {
		return
	}

	// initiate element
	var elementDB ElementDB
	elementDB.CopyBasicFieldsFromElement(element)

	_, err := backRepoElement.db.Create(&elementDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoElement.Map_ElementPtr_ElementDBID[element] = elementDB.ID
	backRepoElement.Map_ElementDBID_ElementPtr[elementDB.ID] = element
	backRepoElement.Map_ElementDBID_ElementDB[elementDB.ID] = &elementDB

	return
}

// BackRepoElement.CommitPhaseTwo commits all staged instances of Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, element := range backRepoElement.Map_ElementDBID_ElementPtr {
		backRepoElement.CommitPhaseTwoInstance(backRepo, idx, element)
	}

	return
}

// BackRepoElement.CommitPhaseTwoInstance commits {{structname }} of models.Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, element *models.Element) (Error error) {

	// fetch matching elementDB
	if elementDB, ok := backRepoElement.Map_ElementDBID_ElementDB[idx]; ok {

		elementDB.CopyBasicFieldsFromElement(element)

		// insertion point for translating pointers encodings into actual pointers
		// 1. reset
		elementDB.ElementPointersEncoding.SubElements = make([]int, 0)
		// 2. encode
		for _, elementAssocEnd := range element.SubElements {
			elementAssocEnd_DB :=
				backRepo.BackRepoElement.GetElementDBFromElementPtr(elementAssocEnd)
			
			// the stage might be inconsistant, meaning that the elementAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if elementAssocEnd_DB == nil {
				continue
			}
			
			elementDB.ElementPointersEncoding.SubElements =
				append(elementDB.ElementPointersEncoding.SubElements, int(elementAssocEnd_DB.ID))
		}

		// 1. reset
		elementDB.ElementPointersEncoding.Rows = make([]int, 0)
		// 2. encode
		for _, rowAssocEnd := range element.Rows {
			rowAssocEnd_DB :=
				backRepo.BackRepoRow.GetRowDBFromRowPtr(rowAssocEnd)
			
			// the stage might be inconsistant, meaning that the rowAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if rowAssocEnd_DB == nil {
				continue
			}
			
			elementDB.ElementPointersEncoding.Rows =
				append(elementDB.ElementPointersEncoding.Rows, int(rowAssocEnd_DB.ID))
		}

		_, err := backRepoElement.db.Save(elementDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Element intance %s", element.Name))
		return err
	}

	return
}

// BackRepoElement.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseOne() (Error error) {

	elementDBArray := make([]ElementDB, 0)
	_, err := backRepoElement.db.Find(&elementDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	elementInstancesToBeRemovedFromTheStage := make(map[*models.Element]any)
	for key, value := range backRepoElement.stage.Elements {
		elementInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, elementDB := range elementDBArray {
		backRepoElement.CheckoutPhaseOneInstance(&elementDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		element, ok := backRepoElement.Map_ElementDBID_ElementPtr[elementDB.ID]
		if ok {
			delete(elementInstancesToBeRemovedFromTheStage, element)
		}
	}

	// remove from stage and back repo's 3 maps all elements that are not in the checkout
	for element := range elementInstancesToBeRemovedFromTheStage {
		element.Unstage(backRepoElement.GetStage())

		// remove instance from the back repo 3 maps
		elementID := backRepoElement.Map_ElementPtr_ElementDBID[element]
		delete(backRepoElement.Map_ElementPtr_ElementDBID, element)
		delete(backRepoElement.Map_ElementDBID_ElementDB, elementID)
		delete(backRepoElement.Map_ElementDBID_ElementPtr, elementID)
	}

	return
}

// CheckoutPhaseOneInstance takes a elementDB that has been found in the DB, updates the backRepo and stages the
// models version of the elementDB
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseOneInstance(elementDB *ElementDB) (Error error) {

	element, ok := backRepoElement.Map_ElementDBID_ElementPtr[elementDB.ID]
	if !ok {
		element = new(models.Element)

		backRepoElement.Map_ElementDBID_ElementPtr[elementDB.ID] = element
		backRepoElement.Map_ElementPtr_ElementDBID[element] = elementDB.ID

		// append model store with the new element
		element.Name = elementDB.Name_Data.String
		element.Stage(backRepoElement.GetStage())
	}
	elementDB.CopyBasicFieldsToElement(element)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	element.Stage(backRepoElement.GetStage())

	// preserve pointer to elementDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ElementDBID_ElementDB)[elementDB hold variable pointers
	elementDB_Data := *elementDB
	preservedPtrToElement := &elementDB_Data
	backRepoElement.Map_ElementDBID_ElementDB[elementDB.ID] = preservedPtrToElement

	return
}

// BackRepoElement.CheckoutPhaseTwo Checkouts all staged instances of Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, elementDB := range backRepoElement.Map_ElementDBID_ElementDB {
		backRepoElement.CheckoutPhaseTwoInstance(backRepo, elementDB)
	}
	return
}

// BackRepoElement.CheckoutPhaseTwoInstance Checkouts staged instances of Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, elementDB *ElementDB) (Error error) {

	element := backRepoElement.Map_ElementDBID_ElementPtr[elementDB.ID]

	elementDB.DecodePointers(backRepo, element)

	return
}

func (elementDB *ElementDB) DecodePointers(backRepo *BackRepoStruct, element *models.Element) {

	// insertion point for checkout of pointer encoding
	// This loop redeem element.SubElements in the stage from the encode in the back repo
	// It parses all ElementDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	element.SubElements = element.SubElements[:0]
	for _, _Elementid := range elementDB.ElementPointersEncoding.SubElements {
		element.SubElements = append(element.SubElements, backRepo.BackRepoElement.Map_ElementDBID_ElementPtr[uint(_Elementid)])
	}

	// This loop redeem element.Rows in the stage from the encode in the back repo
	// It parses all RowDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	element.Rows = element.Rows[:0]
	for _, _Rowid := range elementDB.ElementPointersEncoding.Rows {
		element.Rows = append(element.Rows, backRepo.BackRepoRow.Map_RowDBID_RowPtr[uint(_Rowid)])
	}

	return
}

// CommitElement allows commit of a single element (if already staged)
func (backRepo *BackRepoStruct) CommitElement(element *models.Element) {
	backRepo.BackRepoElement.CommitPhaseOneInstance(element)
	if id, ok := backRepo.BackRepoElement.Map_ElementPtr_ElementDBID[element]; ok {
		backRepo.BackRepoElement.CommitPhaseTwoInstance(backRepo, id, element)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitElement allows checkout of a single element (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutElement(element *models.Element) {
	// check if the element is staged
	if _, ok := backRepo.BackRepoElement.Map_ElementPtr_ElementDBID[element]; ok {

		if id, ok := backRepo.BackRepoElement.Map_ElementPtr_ElementDBID[element]; ok {
			var elementDB ElementDB
			elementDB.ID = id

			if _, err := backRepo.BackRepoElement.db.First(&elementDB, id); err != nil {
				log.Fatalln("CheckoutElement : Problem with getting object with id:", id)
			}
			backRepo.BackRepoElement.CheckoutPhaseOneInstance(&elementDB)
			backRepo.BackRepoElement.CheckoutPhaseTwoInstance(backRepo, &elementDB)
		}
	}
}

// CopyBasicFieldsFromElement
func (elementDB *ElementDB) CopyBasicFieldsFromElement(element *models.Element) {
	// insertion point for fields commit

	elementDB.Name_Data.String = element.Name
	elementDB.Name_Data.Valid = true

	elementDB.Content_Data.String = element.Content
	elementDB.Content_Data.Valid = true

	elementDB.Type_Data.String = element.Type.ToString()
	elementDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromElement_WOP
func (elementDB *ElementDB) CopyBasicFieldsFromElement_WOP(element *models.Element_WOP) {
	// insertion point for fields commit

	elementDB.Name_Data.String = element.Name
	elementDB.Name_Data.Valid = true

	elementDB.Content_Data.String = element.Content
	elementDB.Content_Data.Valid = true

	elementDB.Type_Data.String = element.Type.ToString()
	elementDB.Type_Data.Valid = true
}

// CopyBasicFieldsFromElementWOP
func (elementDB *ElementDB) CopyBasicFieldsFromElementWOP(element *ElementWOP) {
	// insertion point for fields commit

	elementDB.Name_Data.String = element.Name
	elementDB.Name_Data.Valid = true

	elementDB.Content_Data.String = element.Content
	elementDB.Content_Data.Valid = true

	elementDB.Type_Data.String = element.Type.ToString()
	elementDB.Type_Data.Valid = true
}

// CopyBasicFieldsToElement
func (elementDB *ElementDB) CopyBasicFieldsToElement(element *models.Element) {
	// insertion point for checkout of basic fields (back repo to stage)
	element.Name = elementDB.Name_Data.String
	element.Content = elementDB.Content_Data.String
	element.Type.FromString(elementDB.Type_Data.String)
}

// CopyBasicFieldsToElement_WOP
func (elementDB *ElementDB) CopyBasicFieldsToElement_WOP(element *models.Element_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	element.Name = elementDB.Name_Data.String
	element.Content = elementDB.Content_Data.String
	element.Type.FromString(elementDB.Type_Data.String)
}

// CopyBasicFieldsToElementWOP
func (elementDB *ElementDB) CopyBasicFieldsToElementWOP(element *ElementWOP) {
	element.ID = int(elementDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	element.Name = elementDB.Name_Data.String
	element.Content = elementDB.Content_Data.String
	element.Type.FromString(elementDB.Type_Data.String)
}

// Backup generates a json file from a slice of all ElementDB instances in the backrepo
func (backRepoElement *BackRepoElementStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ElementDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ElementDB, 0)
	for _, elementDB := range backRepoElement.Map_ElementDBID_ElementDB {
		forBackup = append(forBackup, elementDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Element ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Element file", err.Error())
	}
}

// Backup generates a json file from a slice of all ElementDB instances in the backrepo
func (backRepoElement *BackRepoElementStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ElementDB, 0)
	for _, elementDB := range backRepoElement.Map_ElementDBID_ElementDB {
		forBackup = append(forBackup, elementDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Element")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Element_Fields, -1)
	for _, elementDB := range forBackup {

		var elementWOP ElementWOP
		elementDB.CopyBasicFieldsToElementWOP(&elementWOP)

		row := sh.AddRow()
		row.WriteStruct(&elementWOP, -1)
	}
}

// RestoreXL from the "Element" sheet all ElementDB instances
func (backRepoElement *BackRepoElementStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoElementid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Element"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoElement.rowVisitorElement)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoElement *BackRepoElementStruct) rowVisitorElement(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var elementWOP ElementWOP
		row.ReadStruct(&elementWOP)

		// add the unmarshalled struct to the stage
		elementDB := new(ElementDB)
		elementDB.CopyBasicFieldsFromElementWOP(&elementWOP)

		elementDB_ID_atBackupTime := elementDB.ID
		elementDB.ID = 0
		_, err := backRepoElement.db.Create(elementDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoElement.Map_ElementDBID_ElementDB[elementDB.ID] = elementDB
		BackRepoElementid_atBckpTime_newID[elementDB_ID_atBackupTime] = elementDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ElementDB.json" in dirPath that stores an array
// of ElementDB and stores it in the database
// the map BackRepoElementid_atBckpTime_newID is updated accordingly
func (backRepoElement *BackRepoElementStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoElementid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ElementDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Element file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ElementDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ElementDBID_ElementDB
	for _, elementDB := range forRestore {

		elementDB_ID_atBackupTime := elementDB.ID
		elementDB.ID = 0
		_, err := backRepoElement.db.Create(elementDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoElement.Map_ElementDBID_ElementDB[elementDB.ID] = elementDB
		BackRepoElementid_atBckpTime_newID[elementDB_ID_atBackupTime] = elementDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Element file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Element>id_atBckpTime_newID
// to compute new index
func (backRepoElement *BackRepoElementStruct) RestorePhaseTwo() {

	for _, elementDB := range backRepoElement.Map_ElementDBID_ElementDB {

		// next line of code is to avert unused variable compilation error
		_ = elementDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		db, _ := backRepoElement.db.Model(elementDB)
		_, err := db.Updates(*elementDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoElement.ResetReversePointers commits all staged instances of Element to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoElement *BackRepoElementStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, element := range backRepoElement.Map_ElementDBID_ElementPtr {
		backRepoElement.ResetReversePointersInstance(backRepo, idx, element)
	}

	return
}

func (backRepoElement *BackRepoElementStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, element *models.Element) (Error error) {

	// fetch matching elementDB
	if elementDB, ok := backRepoElement.Map_ElementDBID_ElementDB[idx]; ok {
		_ = elementDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoElementid_atBckpTime_newID map[uint]uint
