// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmarkdown/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_AnotherDummyData_sql sql.NullBool
var dummy_AnotherDummyData_time time.Duration
var dummy_AnotherDummyData_sort sort.Float64Slice

// AnotherDummyDataAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model anotherdummydataAPI
type AnotherDummyDataAPI struct {
	gorm.Model

	models.AnotherDummyData

	// encoding of pointers
	AnotherDummyDataPointersEnconding
}

// AnotherDummyDataPointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type AnotherDummyDataPointersEnconding struct {
	// insertion for pointer fields encoding declaration
}

// AnotherDummyDataDB describes a anotherdummydata in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model anotherdummydataDB
type AnotherDummyDataDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field anotherdummydataDB.Name {{BasicKind}} (to be completed)
	Name_Data sql.NullString
	// encoding of pointers
	AnotherDummyDataPointersEnconding
}

// AnotherDummyDataDBs arrays anotherdummydataDBs
// swagger:response anotherdummydataDBsResponse
type AnotherDummyDataDBs []AnotherDummyDataDB

// AnotherDummyDataDBResponse provides response
// swagger:response anotherdummydataDBResponse
type AnotherDummyDataDBResponse struct {
	AnotherDummyDataDB
}

// AnotherDummyDataWOP is a AnotherDummyData without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type AnotherDummyDataWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var AnotherDummyData_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoAnotherDummyDataStruct struct {
	// stores AnotherDummyDataDB according to their gorm ID
	Map_AnotherDummyDataDBID_AnotherDummyDataDB *map[uint]*AnotherDummyDataDB

	// stores AnotherDummyDataDB ID according to AnotherDummyData address
	Map_AnotherDummyDataPtr_AnotherDummyDataDBID *map[*models.AnotherDummyData]uint

	// stores AnotherDummyData according to their gorm ID
	Map_AnotherDummyDataDBID_AnotherDummyDataPtr *map[uint]*models.AnotherDummyData

	db *gorm.DB
}

func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) GetDB() *gorm.DB {
	return backRepoAnotherDummyData.db
}

// GetAnotherDummyDataDBFromAnotherDummyDataPtr is a handy function to access the back repo instance from the stage instance
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) GetAnotherDummyDataDBFromAnotherDummyDataPtr(anotherdummydata *models.AnotherDummyData) (anotherdummydataDB *AnotherDummyDataDB) {
	id := (*backRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID)[anotherdummydata]
	anotherdummydataDB = (*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB)[id]
	return
}

// BackRepoAnotherDummyData.Init set up the BackRepo of the AnotherDummyData
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) Init(db *gorm.DB) (Error error) {

	if backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr != nil {
		err := errors.New("In Init, backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr should be nil")
		return err
	}

	if backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB != nil {
		err := errors.New("In Init, backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB should be nil")
		return err
	}

	if backRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID != nil {
		err := errors.New("In Init, backRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.AnotherDummyData, 0)
	backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr = &tmp

	tmpDB := make(map[uint]*AnotherDummyDataDB, 0)
	backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB = &tmpDB

	tmpID := make(map[*models.AnotherDummyData]uint, 0)
	backRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID = &tmpID

	backRepoAnotherDummyData.db = db
	return
}

// BackRepoAnotherDummyData.CommitPhaseOne commits all staged instances of AnotherDummyData to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for anotherdummydata := range stage.AnotherDummyDatas {
		backRepoAnotherDummyData.CommitPhaseOneInstance(anotherdummydata)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, anotherdummydata := range *backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr {
		if _, ok := stage.AnotherDummyDatas[anotherdummydata]; !ok {
			backRepoAnotherDummyData.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoAnotherDummyData.CommitDeleteInstance commits deletion of AnotherDummyData to the BackRepo
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) CommitDeleteInstance(id uint) (Error error) {

	anotherdummydata := (*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr)[id]

	// anotherdummydata is not staged anymore, remove anotherdummydataDB
	anotherdummydataDB := (*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB)[id]
	query := backRepoAnotherDummyData.db.Unscoped().Delete(&anotherdummydataDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID), anotherdummydata)
	delete((*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr), id)
	delete((*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB), id)

	return
}

// BackRepoAnotherDummyData.CommitPhaseOneInstance commits anotherdummydata staged instances of AnotherDummyData to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) CommitPhaseOneInstance(anotherdummydata *models.AnotherDummyData) (Error error) {

	// check if the anotherdummydata is not commited yet
	if _, ok := (*backRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID)[anotherdummydata]; ok {
		return
	}

	// initiate anotherdummydata
	var anotherdummydataDB AnotherDummyDataDB
	anotherdummydataDB.CopyBasicFieldsFromAnotherDummyData(anotherdummydata)

	query := backRepoAnotherDummyData.db.Create(&anotherdummydataDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID)[anotherdummydata] = anotherdummydataDB.ID
	(*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr)[anotherdummydataDB.ID] = anotherdummydata
	(*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB)[anotherdummydataDB.ID] = &anotherdummydataDB

	return
}

// BackRepoAnotherDummyData.CommitPhaseTwo commits all staged instances of AnotherDummyData to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, anotherdummydata := range *backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr {
		backRepoAnotherDummyData.CommitPhaseTwoInstance(backRepo, idx, anotherdummydata)
	}

	return
}

// BackRepoAnotherDummyData.CommitPhaseTwoInstance commits {{structname }} of models.AnotherDummyData to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, anotherdummydata *models.AnotherDummyData) (Error error) {

	// fetch matching anotherdummydataDB
	if anotherdummydataDB, ok := (*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB)[idx]; ok {

		anotherdummydataDB.CopyBasicFieldsFromAnotherDummyData(anotherdummydata)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoAnotherDummyData.db.Save(&anotherdummydataDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown AnotherDummyData intance %s", anotherdummydata.Name))
		return err
	}

	return
}

// BackRepoAnotherDummyData.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) CheckoutPhaseOne() (Error error) {

	anotherdummydataDBArray := make([]AnotherDummyDataDB, 0)
	query := backRepoAnotherDummyData.db.Find(&anotherdummydataDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	anotherdummydataInstancesToBeRemovedFromTheStage := make(map[*models.AnotherDummyData]struct{})
	for key, value := range models.Stage.AnotherDummyDatas {
		anotherdummydataInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, anotherdummydataDB := range anotherdummydataDBArray {
		backRepoAnotherDummyData.CheckoutPhaseOneInstance(&anotherdummydataDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		anotherdummydata, ok := (*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr)[anotherdummydataDB.ID]
		if ok {
			delete(anotherdummydataInstancesToBeRemovedFromTheStage, anotherdummydata)
		}
	}

	// remove from stage and back repo's 3 maps all anotherdummydatas that are not in the checkout
	for anotherdummydata := range anotherdummydataInstancesToBeRemovedFromTheStage {
		anotherdummydata.Unstage()

		// remove instance from the back repo 3 maps
		anotherdummydataID := (*backRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID)[anotherdummydata]
		delete((*backRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID), anotherdummydata)
		delete((*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB), anotherdummydataID)
		delete((*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr), anotherdummydataID)
	}

	return
}

// CheckoutPhaseOneInstance takes a anotherdummydataDB that has been found in the DB, updates the backRepo and stages the
// models version of the anotherdummydataDB
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) CheckoutPhaseOneInstance(anotherdummydataDB *AnotherDummyDataDB) (Error error) {

	anotherdummydata, ok := (*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr)[anotherdummydataDB.ID]
	if !ok {
		anotherdummydata = new(models.AnotherDummyData)

		(*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr)[anotherdummydataDB.ID] = anotherdummydata
		(*backRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID)[anotherdummydata] = anotherdummydataDB.ID

		// append model store with the new element
		anotherdummydata.Name = anotherdummydataDB.Name_Data.String
		anotherdummydata.Stage()
	}
	anotherdummydataDB.CopyBasicFieldsToAnotherDummyData(anotherdummydata)

	// preserve pointer to anotherdummydataDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_AnotherDummyDataDBID_AnotherDummyDataDB)[anotherdummydataDB hold variable pointers
	anotherdummydataDB_Data := *anotherdummydataDB
	preservedPtrToAnotherDummyData := &anotherdummydataDB_Data
	(*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB)[anotherdummydataDB.ID] = preservedPtrToAnotherDummyData

	return
}

// BackRepoAnotherDummyData.CheckoutPhaseTwo Checkouts all staged instances of AnotherDummyData to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, anotherdummydataDB := range *backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB {
		backRepoAnotherDummyData.CheckoutPhaseTwoInstance(backRepo, anotherdummydataDB)
	}
	return
}

// BackRepoAnotherDummyData.CheckoutPhaseTwoInstance Checkouts staged instances of AnotherDummyData to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, anotherdummydataDB *AnotherDummyDataDB) (Error error) {

	anotherdummydata := (*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr)[anotherdummydataDB.ID]
	_ = anotherdummydata // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitAnotherDummyData allows commit of a single anotherdummydata (if already staged)
func (backRepo *BackRepoStruct) CommitAnotherDummyData(anotherdummydata *models.AnotherDummyData) {
	backRepo.BackRepoAnotherDummyData.CommitPhaseOneInstance(anotherdummydata)
	if id, ok := (*backRepo.BackRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID)[anotherdummydata]; ok {
		backRepo.BackRepoAnotherDummyData.CommitPhaseTwoInstance(backRepo, id, anotherdummydata)
	}
}

// CommitAnotherDummyData allows checkout of a single anotherdummydata (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutAnotherDummyData(anotherdummydata *models.AnotherDummyData) {
	// check if the anotherdummydata is staged
	if _, ok := (*backRepo.BackRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID)[anotherdummydata]; ok {

		if id, ok := (*backRepo.BackRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID)[anotherdummydata]; ok {
			var anotherdummydataDB AnotherDummyDataDB
			anotherdummydataDB.ID = id

			if err := backRepo.BackRepoAnotherDummyData.db.First(&anotherdummydataDB, id).Error; err != nil {
				log.Panicln("CheckoutAnotherDummyData : Problem with getting object with id:", id)
			}
			backRepo.BackRepoAnotherDummyData.CheckoutPhaseOneInstance(&anotherdummydataDB)
			backRepo.BackRepoAnotherDummyData.CheckoutPhaseTwoInstance(backRepo, &anotherdummydataDB)
		}
	}
}

// CopyBasicFieldsFromAnotherDummyData
func (anotherdummydataDB *AnotherDummyDataDB) CopyBasicFieldsFromAnotherDummyData(anotherdummydata *models.AnotherDummyData) {
	// insertion point for fields commit

	anotherdummydataDB.Name_Data.String = anotherdummydata.Name
	anotherdummydataDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromAnotherDummyDataWOP
func (anotherdummydataDB *AnotherDummyDataDB) CopyBasicFieldsFromAnotherDummyDataWOP(anotherdummydata *AnotherDummyDataWOP) {
	// insertion point for fields commit

	anotherdummydataDB.Name_Data.String = anotherdummydata.Name
	anotherdummydataDB.Name_Data.Valid = true
}

// CopyBasicFieldsToAnotherDummyData
func (anotherdummydataDB *AnotherDummyDataDB) CopyBasicFieldsToAnotherDummyData(anotherdummydata *models.AnotherDummyData) {
	// insertion point for checkout of basic fields (back repo to stage)
	anotherdummydata.Name = anotherdummydataDB.Name_Data.String
}

// CopyBasicFieldsToAnotherDummyDataWOP
func (anotherdummydataDB *AnotherDummyDataDB) CopyBasicFieldsToAnotherDummyDataWOP(anotherdummydata *AnotherDummyDataWOP) {
	anotherdummydata.ID = int(anotherdummydataDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	anotherdummydata.Name = anotherdummydataDB.Name_Data.String
}

// Backup generates a json file from a slice of all AnotherDummyDataDB instances in the backrepo
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "AnotherDummyDataDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AnotherDummyDataDB, 0)
	for _, anotherdummydataDB := range *backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB {
		forBackup = append(forBackup, anotherdummydataDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json AnotherDummyData ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json AnotherDummyData file", err.Error())
	}
}

// Backup generates a json file from a slice of all AnotherDummyDataDB instances in the backrepo
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*AnotherDummyDataDB, 0)
	for _, anotherdummydataDB := range *backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB {
		forBackup = append(forBackup, anotherdummydataDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("AnotherDummyData")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&AnotherDummyData_Fields, -1)
	for _, anotherdummydataDB := range forBackup {

		var anotherdummydataWOP AnotherDummyDataWOP
		anotherdummydataDB.CopyBasicFieldsToAnotherDummyDataWOP(&anotherdummydataWOP)

		row := sh.AddRow()
		row.WriteStruct(&anotherdummydataWOP, -1)
	}
}

// RestoreXL from the "AnotherDummyData" sheet all AnotherDummyDataDB instances
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoAnotherDummyDataid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["AnotherDummyData"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoAnotherDummyData.rowVisitorAnotherDummyData)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) rowVisitorAnotherDummyData(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var anotherdummydataWOP AnotherDummyDataWOP
		row.ReadStruct(&anotherdummydataWOP)

		// add the unmarshalled struct to the stage
		anotherdummydataDB := new(AnotherDummyDataDB)
		anotherdummydataDB.CopyBasicFieldsFromAnotherDummyDataWOP(&anotherdummydataWOP)

		anotherdummydataDB_ID_atBackupTime := anotherdummydataDB.ID
		anotherdummydataDB.ID = 0
		query := backRepoAnotherDummyData.db.Create(anotherdummydataDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB)[anotherdummydataDB.ID] = anotherdummydataDB
		BackRepoAnotherDummyDataid_atBckpTime_newID[anotherdummydataDB_ID_atBackupTime] = anotherdummydataDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "AnotherDummyDataDB.json" in dirPath that stores an array
// of AnotherDummyDataDB and stores it in the database
// the map BackRepoAnotherDummyDataid_atBckpTime_newID is updated accordingly
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoAnotherDummyDataid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "AnotherDummyDataDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json AnotherDummyData file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*AnotherDummyDataDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_AnotherDummyDataDBID_AnotherDummyDataDB
	for _, anotherdummydataDB := range forRestore {

		anotherdummydataDB_ID_atBackupTime := anotherdummydataDB.ID
		anotherdummydataDB.ID = 0
		query := backRepoAnotherDummyData.db.Create(anotherdummydataDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB)[anotherdummydataDB.ID] = anotherdummydataDB
		BackRepoAnotherDummyDataid_atBckpTime_newID[anotherdummydataDB_ID_atBackupTime] = anotherdummydataDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json AnotherDummyData file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<AnotherDummyData>id_atBckpTime_newID
// to compute new index
func (backRepoAnotherDummyData *BackRepoAnotherDummyDataStruct) RestorePhaseTwo() {

	for _, anotherdummydataDB := range *backRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataDB {

		// next line of code is to avert unused variable compilation error
		_ = anotherdummydataDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoAnotherDummyData.db.Model(anotherdummydataDB).Updates(*anotherdummydataDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoAnotherDummyDataid_atBckpTime_newID map[uint]uint
