// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongmarkdown/go/db"
	"github.com/fullstack-lang/gongmarkdown/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_DummyData_sql sql.NullBool
var dummy_DummyData_time time.Duration
var dummy_DummyData_sort sort.Float64Slice

// DummyDataAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model dummydataAPI
type DummyDataAPI struct {
	gorm.Model

	models.DummyData_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	DummyDataPointersEncoding DummyDataPointersEncoding
}

// DummyDataPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type DummyDataPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field DummyPointerToGongStruct is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	DummyPointerToGongStructID sql.NullInt64
}

// DummyDataDB describes a dummydata in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model dummydataDB
type DummyDataDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field dummydataDB.Name
	Name_Data sql.NullString

	// Declation for basic field dummydataDB.DummyString
	DummyString_Data sql.NullString

	// Declation for basic field dummydataDB.DummyInt
	DummyInt_Data sql.NullInt64

	// Declation for basic field dummydataDB.DummyFloat
	DummyFloat_Data sql.NullFloat64

	// Declation for basic field dummydataDB.DummyBool
	// provide the sql storage for the boolan
	DummyBool_Data sql.NullBool

	// Declation for basic field dummydataDB.DummyEnumString
	DummyEnumString_Data sql.NullString

	// Declation for basic field dummydataDB.DummyEnumInt
	DummyEnumInt_Data sql.NullInt64

	// Declation for basic field dummydataDB.DummyTime
	DummyTime_Data sql.NullTime

	// Declation for basic field dummydataDB.DummyDuration
	DummyDuration_Data sql.NullInt64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	DummyDataPointersEncoding
}

// DummyDataDBs arrays dummydataDBs
// swagger:response dummydataDBsResponse
type DummyDataDBs []DummyDataDB

// DummyDataDBResponse provides response
// swagger:response dummydataDBResponse
type DummyDataDBResponse struct {
	DummyDataDB
}

// DummyDataWOP is a DummyData without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type DummyDataWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	DummyString string `xlsx:"2"`

	DummyInt int `xlsx:"3"`

	DummyFloat float64 `xlsx:"4"`

	DummyBool bool `xlsx:"5"`

	DummyEnumString models.ElementType `xlsx:"6"`

	DummyEnumInt models.DummnyTypeInt `xlsx:"7"`

	DummyTime time.Time `xlsx:"8"`

	DummyDuration time.Duration `xlsx:"9"`
	// insertion for WOP pointer fields
}

var DummyData_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"DummyString",
	"DummyInt",
	"DummyFloat",
	"DummyBool",
	"DummyEnumString",
	"DummyEnumInt",
	"DummyTime",
	"DummyDuration",
}

type BackRepoDummyDataStruct struct {
	// stores DummyDataDB according to their gorm ID
	Map_DummyDataDBID_DummyDataDB map[uint]*DummyDataDB

	// stores DummyDataDB ID according to DummyData address
	Map_DummyDataPtr_DummyDataDBID map[*models.DummyData]uint

	// stores DummyData according to their gorm ID
	Map_DummyDataDBID_DummyDataPtr map[uint]*models.DummyData

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoDummyData *BackRepoDummyDataStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoDummyData.stage
	return
}

func (backRepoDummyData *BackRepoDummyDataStruct) GetDB() db.DBInterface {
	return backRepoDummyData.db
}

// GetDummyDataDBFromDummyDataPtr is a handy function to access the back repo instance from the stage instance
func (backRepoDummyData *BackRepoDummyDataStruct) GetDummyDataDBFromDummyDataPtr(dummydata *models.DummyData) (dummydataDB *DummyDataDB) {
	id := backRepoDummyData.Map_DummyDataPtr_DummyDataDBID[dummydata]
	dummydataDB = backRepoDummyData.Map_DummyDataDBID_DummyDataDB[id]
	return
}

// BackRepoDummyData.CommitPhaseOne commits all staged instances of DummyData to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDummyData *BackRepoDummyDataStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for dummydata := range stage.DummyDatas {
		backRepoDummyData.CommitPhaseOneInstance(dummydata)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, dummydata := range backRepoDummyData.Map_DummyDataDBID_DummyDataPtr {
		if _, ok := stage.DummyDatas[dummydata]; !ok {
			backRepoDummyData.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoDummyData.CommitDeleteInstance commits deletion of DummyData to the BackRepo
func (backRepoDummyData *BackRepoDummyDataStruct) CommitDeleteInstance(id uint) (Error error) {

	dummydata := backRepoDummyData.Map_DummyDataDBID_DummyDataPtr[id]

	// dummydata is not staged anymore, remove dummydataDB
	dummydataDB := backRepoDummyData.Map_DummyDataDBID_DummyDataDB[id]
	db, _ := backRepoDummyData.db.Unscoped()
	_, err := db.Delete(dummydataDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoDummyData.Map_DummyDataPtr_DummyDataDBID, dummydata)
	delete(backRepoDummyData.Map_DummyDataDBID_DummyDataPtr, id)
	delete(backRepoDummyData.Map_DummyDataDBID_DummyDataDB, id)

	return
}

// BackRepoDummyData.CommitPhaseOneInstance commits dummydata staged instances of DummyData to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoDummyData *BackRepoDummyDataStruct) CommitPhaseOneInstance(dummydata *models.DummyData) (Error error) {

	// check if the dummydata is not commited yet
	if _, ok := backRepoDummyData.Map_DummyDataPtr_DummyDataDBID[dummydata]; ok {
		return
	}

	// initiate dummydata
	var dummydataDB DummyDataDB
	dummydataDB.CopyBasicFieldsFromDummyData(dummydata)

	_, err := backRepoDummyData.db.Create(&dummydataDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoDummyData.Map_DummyDataPtr_DummyDataDBID[dummydata] = dummydataDB.ID
	backRepoDummyData.Map_DummyDataDBID_DummyDataPtr[dummydataDB.ID] = dummydata
	backRepoDummyData.Map_DummyDataDBID_DummyDataDB[dummydataDB.ID] = &dummydataDB

	return
}

// BackRepoDummyData.CommitPhaseTwo commits all staged instances of DummyData to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyData *BackRepoDummyDataStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, dummydata := range backRepoDummyData.Map_DummyDataDBID_DummyDataPtr {
		backRepoDummyData.CommitPhaseTwoInstance(backRepo, idx, dummydata)
	}

	return
}

// BackRepoDummyData.CommitPhaseTwoInstance commits {{structname }} of models.DummyData to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyData *BackRepoDummyDataStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, dummydata *models.DummyData) (Error error) {

	// fetch matching dummydataDB
	if dummydataDB, ok := backRepoDummyData.Map_DummyDataDBID_DummyDataDB[idx]; ok {

		dummydataDB.CopyBasicFieldsFromDummyData(dummydata)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value dummydata.DummyPointerToGongStruct translates to updating the dummydata.DummyPointerToGongStructID
		dummydataDB.DummyPointerToGongStructID.Valid = true // allow for a 0 value (nil association)
		if dummydata.DummyPointerToGongStruct != nil {
			if DummyPointerToGongStructId, ok := backRepo.BackRepoAnotherDummyData.Map_AnotherDummyDataPtr_AnotherDummyDataDBID[dummydata.DummyPointerToGongStruct]; ok {
				dummydataDB.DummyPointerToGongStructID.Int64 = int64(DummyPointerToGongStructId)
				dummydataDB.DummyPointerToGongStructID.Valid = true
			}
		} else {
			dummydataDB.DummyPointerToGongStructID.Int64 = 0
			dummydataDB.DummyPointerToGongStructID.Valid = true
		}

		_, err := backRepoDummyData.db.Save(dummydataDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown DummyData intance %s", dummydata.Name))
		return err
	}

	return
}

// BackRepoDummyData.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoDummyData *BackRepoDummyDataStruct) CheckoutPhaseOne() (Error error) {

	dummydataDBArray := make([]DummyDataDB, 0)
	_, err := backRepoDummyData.db.Find(&dummydataDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	dummydataInstancesToBeRemovedFromTheStage := make(map[*models.DummyData]any)
	for key, value := range backRepoDummyData.stage.DummyDatas {
		dummydataInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, dummydataDB := range dummydataDBArray {
		backRepoDummyData.CheckoutPhaseOneInstance(&dummydataDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		dummydata, ok := backRepoDummyData.Map_DummyDataDBID_DummyDataPtr[dummydataDB.ID]
		if ok {
			delete(dummydataInstancesToBeRemovedFromTheStage, dummydata)
		}
	}

	// remove from stage and back repo's 3 maps all dummydatas that are not in the checkout
	for dummydata := range dummydataInstancesToBeRemovedFromTheStage {
		dummydata.Unstage(backRepoDummyData.GetStage())

		// remove instance from the back repo 3 maps
		dummydataID := backRepoDummyData.Map_DummyDataPtr_DummyDataDBID[dummydata]
		delete(backRepoDummyData.Map_DummyDataPtr_DummyDataDBID, dummydata)
		delete(backRepoDummyData.Map_DummyDataDBID_DummyDataDB, dummydataID)
		delete(backRepoDummyData.Map_DummyDataDBID_DummyDataPtr, dummydataID)
	}

	return
}

// CheckoutPhaseOneInstance takes a dummydataDB that has been found in the DB, updates the backRepo and stages the
// models version of the dummydataDB
func (backRepoDummyData *BackRepoDummyDataStruct) CheckoutPhaseOneInstance(dummydataDB *DummyDataDB) (Error error) {

	dummydata, ok := backRepoDummyData.Map_DummyDataDBID_DummyDataPtr[dummydataDB.ID]
	if !ok {
		dummydata = new(models.DummyData)

		backRepoDummyData.Map_DummyDataDBID_DummyDataPtr[dummydataDB.ID] = dummydata
		backRepoDummyData.Map_DummyDataPtr_DummyDataDBID[dummydata] = dummydataDB.ID

		// append model store with the new element
		dummydata.Name = dummydataDB.Name_Data.String
		dummydata.Stage(backRepoDummyData.GetStage())
	}
	dummydataDB.CopyBasicFieldsToDummyData(dummydata)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	dummydata.Stage(backRepoDummyData.GetStage())

	// preserve pointer to dummydataDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_DummyDataDBID_DummyDataDB)[dummydataDB hold variable pointers
	dummydataDB_Data := *dummydataDB
	preservedPtrToDummyData := &dummydataDB_Data
	backRepoDummyData.Map_DummyDataDBID_DummyDataDB[dummydataDB.ID] = preservedPtrToDummyData

	return
}

// BackRepoDummyData.CheckoutPhaseTwo Checkouts all staged instances of DummyData to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyData *BackRepoDummyDataStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, dummydataDB := range backRepoDummyData.Map_DummyDataDBID_DummyDataDB {
		backRepoDummyData.CheckoutPhaseTwoInstance(backRepo, dummydataDB)
	}
	return
}

// BackRepoDummyData.CheckoutPhaseTwoInstance Checkouts staged instances of DummyData to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyData *BackRepoDummyDataStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, dummydataDB *DummyDataDB) (Error error) {

	dummydata := backRepoDummyData.Map_DummyDataDBID_DummyDataPtr[dummydataDB.ID]

	dummydataDB.DecodePointers(backRepo, dummydata)

	return
}

func (dummydataDB *DummyDataDB) DecodePointers(backRepo *BackRepoStruct, dummydata *models.DummyData) {

	// insertion point for checkout of pointer encoding
	// DummyPointerToGongStruct field	
	{
		id := dummydataDB.DummyPointerToGongStructID.Int64
		if id != 0 {
			tmp, ok := backRepo.BackRepoAnotherDummyData.Map_AnotherDummyDataDBID_AnotherDummyDataPtr[uint(id)]

			if !ok {
				log.Fatalln("DecodePointers: dummydata.DummyPointerToGongStruct, unknown pointer id", id)
			}

			// updates only if field has changed
			if dummydata.DummyPointerToGongStruct == nil || dummydata.DummyPointerToGongStruct != tmp {
				dummydata.DummyPointerToGongStruct = tmp
			}
		} else {
			dummydata.DummyPointerToGongStruct = nil
		}
	}
	
	return
}

// CommitDummyData allows commit of a single dummydata (if already staged)
func (backRepo *BackRepoStruct) CommitDummyData(dummydata *models.DummyData) {
	backRepo.BackRepoDummyData.CommitPhaseOneInstance(dummydata)
	if id, ok := backRepo.BackRepoDummyData.Map_DummyDataPtr_DummyDataDBID[dummydata]; ok {
		backRepo.BackRepoDummyData.CommitPhaseTwoInstance(backRepo, id, dummydata)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitDummyData allows checkout of a single dummydata (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutDummyData(dummydata *models.DummyData) {
	// check if the dummydata is staged
	if _, ok := backRepo.BackRepoDummyData.Map_DummyDataPtr_DummyDataDBID[dummydata]; ok {

		if id, ok := backRepo.BackRepoDummyData.Map_DummyDataPtr_DummyDataDBID[dummydata]; ok {
			var dummydataDB DummyDataDB
			dummydataDB.ID = id

			if _, err := backRepo.BackRepoDummyData.db.First(&dummydataDB, id); err != nil {
				log.Fatalln("CheckoutDummyData : Problem with getting object with id:", id)
			}
			backRepo.BackRepoDummyData.CheckoutPhaseOneInstance(&dummydataDB)
			backRepo.BackRepoDummyData.CheckoutPhaseTwoInstance(backRepo, &dummydataDB)
		}
	}
}

// CopyBasicFieldsFromDummyData
func (dummydataDB *DummyDataDB) CopyBasicFieldsFromDummyData(dummydata *models.DummyData) {
	// insertion point for fields commit

	dummydataDB.Name_Data.String = dummydata.Name
	dummydataDB.Name_Data.Valid = true

	dummydataDB.DummyString_Data.String = dummydata.DummyString
	dummydataDB.DummyString_Data.Valid = true

	dummydataDB.DummyInt_Data.Int64 = int64(dummydata.DummyInt)
	dummydataDB.DummyInt_Data.Valid = true

	dummydataDB.DummyFloat_Data.Float64 = dummydata.DummyFloat
	dummydataDB.DummyFloat_Data.Valid = true

	dummydataDB.DummyBool_Data.Bool = dummydata.DummyBool
	dummydataDB.DummyBool_Data.Valid = true

	dummydataDB.DummyEnumString_Data.String = dummydata.DummyEnumString.ToString()
	dummydataDB.DummyEnumString_Data.Valid = true

	dummydataDB.DummyEnumInt_Data.Int64 = int64(dummydata.DummyEnumInt)
	dummydataDB.DummyEnumInt_Data.Valid = true

	dummydataDB.DummyTime_Data.Time = dummydata.DummyTime
	dummydataDB.DummyTime_Data.Valid = true

	dummydataDB.DummyDuration_Data.Int64 = int64(dummydata.DummyDuration)
	dummydataDB.DummyDuration_Data.Valid = true
}

// CopyBasicFieldsFromDummyData_WOP
func (dummydataDB *DummyDataDB) CopyBasicFieldsFromDummyData_WOP(dummydata *models.DummyData_WOP) {
	// insertion point for fields commit

	dummydataDB.Name_Data.String = dummydata.Name
	dummydataDB.Name_Data.Valid = true

	dummydataDB.DummyString_Data.String = dummydata.DummyString
	dummydataDB.DummyString_Data.Valid = true

	dummydataDB.DummyInt_Data.Int64 = int64(dummydata.DummyInt)
	dummydataDB.DummyInt_Data.Valid = true

	dummydataDB.DummyFloat_Data.Float64 = dummydata.DummyFloat
	dummydataDB.DummyFloat_Data.Valid = true

	dummydataDB.DummyBool_Data.Bool = dummydata.DummyBool
	dummydataDB.DummyBool_Data.Valid = true

	dummydataDB.DummyEnumString_Data.String = dummydata.DummyEnumString.ToString()
	dummydataDB.DummyEnumString_Data.Valid = true

	dummydataDB.DummyEnumInt_Data.Int64 = int64(dummydata.DummyEnumInt)
	dummydataDB.DummyEnumInt_Data.Valid = true

	dummydataDB.DummyTime_Data.Time = dummydata.DummyTime
	dummydataDB.DummyTime_Data.Valid = true

	dummydataDB.DummyDuration_Data.Int64 = int64(dummydata.DummyDuration)
	dummydataDB.DummyDuration_Data.Valid = true
}

// CopyBasicFieldsFromDummyDataWOP
func (dummydataDB *DummyDataDB) CopyBasicFieldsFromDummyDataWOP(dummydata *DummyDataWOP) {
	// insertion point for fields commit

	dummydataDB.Name_Data.String = dummydata.Name
	dummydataDB.Name_Data.Valid = true

	dummydataDB.DummyString_Data.String = dummydata.DummyString
	dummydataDB.DummyString_Data.Valid = true

	dummydataDB.DummyInt_Data.Int64 = int64(dummydata.DummyInt)
	dummydataDB.DummyInt_Data.Valid = true

	dummydataDB.DummyFloat_Data.Float64 = dummydata.DummyFloat
	dummydataDB.DummyFloat_Data.Valid = true

	dummydataDB.DummyBool_Data.Bool = dummydata.DummyBool
	dummydataDB.DummyBool_Data.Valid = true

	dummydataDB.DummyEnumString_Data.String = dummydata.DummyEnumString.ToString()
	dummydataDB.DummyEnumString_Data.Valid = true

	dummydataDB.DummyEnumInt_Data.Int64 = int64(dummydata.DummyEnumInt)
	dummydataDB.DummyEnumInt_Data.Valid = true

	dummydataDB.DummyTime_Data.Time = dummydata.DummyTime
	dummydataDB.DummyTime_Data.Valid = true

	dummydataDB.DummyDuration_Data.Int64 = int64(dummydata.DummyDuration)
	dummydataDB.DummyDuration_Data.Valid = true
}

// CopyBasicFieldsToDummyData
func (dummydataDB *DummyDataDB) CopyBasicFieldsToDummyData(dummydata *models.DummyData) {
	// insertion point for checkout of basic fields (back repo to stage)
	dummydata.Name = dummydataDB.Name_Data.String
	dummydata.DummyString = dummydataDB.DummyString_Data.String
	dummydata.DummyInt = int(dummydataDB.DummyInt_Data.Int64)
	dummydata.DummyFloat = dummydataDB.DummyFloat_Data.Float64
	dummydata.DummyBool = dummydataDB.DummyBool_Data.Bool
	dummydata.DummyEnumString.FromString(dummydataDB.DummyEnumString_Data.String)
	dummydata.DummyEnumInt = models.DummnyTypeInt(dummydataDB.DummyEnumInt_Data.Int64)
	dummydata.DummyTime = dummydataDB.DummyTime_Data.Time
	dummydata.DummyDuration = time.Duration(dummydataDB.DummyDuration_Data.Int64)
}

// CopyBasicFieldsToDummyData_WOP
func (dummydataDB *DummyDataDB) CopyBasicFieldsToDummyData_WOP(dummydata *models.DummyData_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	dummydata.Name = dummydataDB.Name_Data.String
	dummydata.DummyString = dummydataDB.DummyString_Data.String
	dummydata.DummyInt = int(dummydataDB.DummyInt_Data.Int64)
	dummydata.DummyFloat = dummydataDB.DummyFloat_Data.Float64
	dummydata.DummyBool = dummydataDB.DummyBool_Data.Bool
	dummydata.DummyEnumString.FromString(dummydataDB.DummyEnumString_Data.String)
	dummydata.DummyEnumInt = models.DummnyTypeInt(dummydataDB.DummyEnumInt_Data.Int64)
	dummydata.DummyTime = dummydataDB.DummyTime_Data.Time
	dummydata.DummyDuration = time.Duration(dummydataDB.DummyDuration_Data.Int64)
}

// CopyBasicFieldsToDummyDataWOP
func (dummydataDB *DummyDataDB) CopyBasicFieldsToDummyDataWOP(dummydata *DummyDataWOP) {
	dummydata.ID = int(dummydataDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	dummydata.Name = dummydataDB.Name_Data.String
	dummydata.DummyString = dummydataDB.DummyString_Data.String
	dummydata.DummyInt = int(dummydataDB.DummyInt_Data.Int64)
	dummydata.DummyFloat = dummydataDB.DummyFloat_Data.Float64
	dummydata.DummyBool = dummydataDB.DummyBool_Data.Bool
	dummydata.DummyEnumString.FromString(dummydataDB.DummyEnumString_Data.String)
	dummydata.DummyEnumInt = models.DummnyTypeInt(dummydataDB.DummyEnumInt_Data.Int64)
	dummydata.DummyTime = dummydataDB.DummyTime_Data.Time
	dummydata.DummyDuration = time.Duration(dummydataDB.DummyDuration_Data.Int64)
}

// Backup generates a json file from a slice of all DummyDataDB instances in the backrepo
func (backRepoDummyData *BackRepoDummyDataStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "DummyDataDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DummyDataDB, 0)
	for _, dummydataDB := range backRepoDummyData.Map_DummyDataDBID_DummyDataDB {
		forBackup = append(forBackup, dummydataDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json DummyData ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json DummyData file", err.Error())
	}
}

// Backup generates a json file from a slice of all DummyDataDB instances in the backrepo
func (backRepoDummyData *BackRepoDummyDataStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*DummyDataDB, 0)
	for _, dummydataDB := range backRepoDummyData.Map_DummyDataDBID_DummyDataDB {
		forBackup = append(forBackup, dummydataDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("DummyData")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&DummyData_Fields, -1)
	for _, dummydataDB := range forBackup {

		var dummydataWOP DummyDataWOP
		dummydataDB.CopyBasicFieldsToDummyDataWOP(&dummydataWOP)

		row := sh.AddRow()
		row.WriteStruct(&dummydataWOP, -1)
	}
}

// RestoreXL from the "DummyData" sheet all DummyDataDB instances
func (backRepoDummyData *BackRepoDummyDataStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoDummyDataid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["DummyData"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoDummyData.rowVisitorDummyData)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoDummyData *BackRepoDummyDataStruct) rowVisitorDummyData(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var dummydataWOP DummyDataWOP
		row.ReadStruct(&dummydataWOP)

		// add the unmarshalled struct to the stage
		dummydataDB := new(DummyDataDB)
		dummydataDB.CopyBasicFieldsFromDummyDataWOP(&dummydataWOP)

		dummydataDB_ID_atBackupTime := dummydataDB.ID
		dummydataDB.ID = 0
		_, err := backRepoDummyData.db.Create(dummydataDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoDummyData.Map_DummyDataDBID_DummyDataDB[dummydataDB.ID] = dummydataDB
		BackRepoDummyDataid_atBckpTime_newID[dummydataDB_ID_atBackupTime] = dummydataDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "DummyDataDB.json" in dirPath that stores an array
// of DummyDataDB and stores it in the database
// the map BackRepoDummyDataid_atBckpTime_newID is updated accordingly
func (backRepoDummyData *BackRepoDummyDataStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoDummyDataid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "DummyDataDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json DummyData file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*DummyDataDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_DummyDataDBID_DummyDataDB
	for _, dummydataDB := range forRestore {

		dummydataDB_ID_atBackupTime := dummydataDB.ID
		dummydataDB.ID = 0
		_, err := backRepoDummyData.db.Create(dummydataDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoDummyData.Map_DummyDataDBID_DummyDataDB[dummydataDB.ID] = dummydataDB
		BackRepoDummyDataid_atBckpTime_newID[dummydataDB_ID_atBackupTime] = dummydataDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json DummyData file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<DummyData>id_atBckpTime_newID
// to compute new index
func (backRepoDummyData *BackRepoDummyDataStruct) RestorePhaseTwo() {

	for _, dummydataDB := range backRepoDummyData.Map_DummyDataDBID_DummyDataDB {

		// next line of code is to avert unused variable compilation error
		_ = dummydataDB

		// insertion point for reindexing pointers encoding
		// reindexing DummyPointerToGongStruct field
		if dummydataDB.DummyPointerToGongStructID.Int64 != 0 {
			dummydataDB.DummyPointerToGongStructID.Int64 = int64(BackRepoAnotherDummyDataid_atBckpTime_newID[uint(dummydataDB.DummyPointerToGongStructID.Int64)])
			dummydataDB.DummyPointerToGongStructID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoDummyData.db.Model(dummydataDB)
		_, err := db.Updates(*dummydataDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoDummyData.ResetReversePointers commits all staged instances of DummyData to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoDummyData *BackRepoDummyDataStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, dummydata := range backRepoDummyData.Map_DummyDataDBID_DummyDataPtr {
		backRepoDummyData.ResetReversePointersInstance(backRepo, idx, dummydata)
	}

	return
}

func (backRepoDummyData *BackRepoDummyDataStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, dummydata *models.DummyData) (Error error) {

	// fetch matching dummydataDB
	if dummydataDB, ok := backRepoDummyData.Map_DummyDataDBID_DummyDataDB[idx]; ok {
		_ = dummydataDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoDummyDataid_atBckpTime_newID map[uint]uint
